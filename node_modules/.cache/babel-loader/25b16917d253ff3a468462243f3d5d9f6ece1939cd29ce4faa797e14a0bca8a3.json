{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5001/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const login = async (username, password) => {\n  const response = await api.post('/auth/login', {\n    username,\n    password\n  });\n  return response.data;\n};\nexport const createTicket = async ticketData => {\n  const formData = new FormData();\n\n  // Add ticket data\n  formData.append('title', ticketData.title);\n  formData.append('description', ticketData.description);\n  formData.append('requesterId', ticketData.requesterId);\n  formData.append('department', ticketData.department);\n  formData.append('chemicalConfig', JSON.stringify(ticketData.chemicalConfig));\n\n  // Add files if they exist\n  if (ticketData.attachments && ticketData.attachments instanceof FileList) {\n    Array.from(ticketData.attachments).forEach(file => {\n      formData.append('files', file);\n    });\n  }\n  const response = await api.post('/tickets', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\n\n// New function to get tickets without date filtering for debugging\nexport const getAllTicketsRaw = async () => {\n  console.log('Fetching all tickets raw for debugging');\n  try {\n    const response = await api.get('/tickets');\n    console.log('Raw API response:', response);\n    return response.data;\n  } catch (error) {\n    console.error('Error in raw ticket fetch:', error);\n    return {\n      error\n    };\n  }\n};\nexport const getTickets = async dateRange => {\n  // Build query parameters including date range if provided\n  let params = {};\n  if (dateRange) {\n    if (dateRange.startDate) {\n      params.startDate = dateRange.startDate.toISOString().split('T')[0];\n    }\n    if (dateRange.endDate) {\n      params.endDate = dateRange.endDate.toISOString().split('T')[0];\n    }\n  }\n  console.log('Fetching tickets with params:', params);\n\n  // Convert params object to URL search params\n  const queryString = Object.keys(params).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join('&');\n  const url = queryString ? `/tickets?${queryString}` : '/tickets';\n  try {\n    const response = await api.get(url);\n    console.log('Full API response:', response);\n\n    // Check if we have a response message indicating auth issues\n    if (response.data && response.data.message === \"Please authenticate.\") {\n      console.error('Authentication error when fetching tickets');\n      // Force re-login\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n      return [];\n    }\n\n    // Check if response.data is an object with a tickets property\n    if (response.data && typeof response.data === 'object' && Array.isArray(response.data.tickets)) {\n      console.log(`Received ${response.data.tickets.length} tickets from API`);\n      return response.data.tickets;\n    }\n    // Fallback for backward compatibility if the API directly returns an array\n    if (Array.isArray(response.data)) {\n      console.log(`Received ${response.data.length} tickets from API (legacy format)`);\n      return response.data;\n    }\n    // If neither condition is met, return an empty array\n    console.error('Unexpected response format from /tickets endpoint:', response.data);\n    return [];\n  } catch (error) {\n    console.error('Error fetching tickets:', error);\n    return [];\n  }\n};\nexport const updateTicketStatus = async (ticketId, status) => {\n  const response = await api.put(`/tickets/${ticketId}`, {\n    status\n  });\n  return response.data;\n};\nexport const updateTicket = async (ticketId, updateData) => {\n  const formData = new FormData();\n\n  // Add basic ticket data if provided\n  if (updateData.title) formData.append('title', updateData.title);\n  if (updateData.description) formData.append('description', updateData.description);\n  if (updateData.status) formData.append('status', updateData.status);\n  if (updateData.department) formData.append('department', updateData.department);\n  if (updateData.chemicalConfig) formData.append('chemicalConfig', JSON.stringify(updateData.chemicalConfig));\n\n  // Add new files if they exist\n  if (updateData.attachments && updateData.attachments instanceof FileList) {\n    Array.from(updateData.attachments).forEach(file => {\n      formData.append('files', file);\n    });\n  }\n  const response = await api.put(`/tickets/${ticketId}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","login","username","password","response","post","data","createTicket","ticketData","formData","FormData","append","title","description","requesterId","department","JSON","stringify","chemicalConfig","attachments","FileList","Array","from","forEach","file","getAllTicketsRaw","console","log","get","error","getTickets","dateRange","params","startDate","toISOString","split","endDate","queryString","Object","keys","map","key","encodeURIComponent","join","url","message","removeItem","window","location","href","isArray","tickets","length","updateTicketStatus","ticketId","status","put","updateTicket","updateData"],"sources":["/Users/a667227/Desktop/Work/ticket-management/src/services/api.ts"],"sourcesContent":["import axios, { InternalAxiosRequestConfig } from 'axios';\nimport { Ticket } from '../types/system';\n\nconst API_BASE_URL = 'http://localhost:5001/api';\n\nexport interface LoginResponse {\n  token: string;\n  user: {\n    id: string;\n    username: string;\n    email: string;\n    fullName: string;\n    role: string;\n    department: string;\n  };\n}\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use((config: InternalAxiosRequestConfig) => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const login = async (username: string, password: string): Promise<LoginResponse> => {\n  const response = await api.post<LoginResponse>('/auth/login', { username, password });\n  return response.data;\n};\n\nexport const createTicket = async (ticketData: Omit<Ticket, 'id' | 'status' | 'createdAt' | 'updatedAt'>): Promise<Ticket> => {\n  const formData = new FormData();\n  \n  // Add ticket data\n  formData.append('title', ticketData.title);\n  formData.append('description', ticketData.description);\n  formData.append('requesterId', ticketData.requesterId);\n  formData.append('department', ticketData.department);\n  formData.append('chemicalConfig', JSON.stringify(ticketData.chemicalConfig));\n  \n  // Add files if they exist\n  if (ticketData.attachments && ticketData.attachments instanceof FileList) {\n    Array.from(ticketData.attachments).forEach(file => {\n      formData.append('files', file);\n    });\n  }\n\n  const response = await api.post<Ticket>('/tickets', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\n// New function to get tickets without date filtering for debugging\nexport const getAllTicketsRaw = async (): Promise<any> => {\n  console.log('Fetching all tickets raw for debugging');\n  try {\n    const response = await api.get('/tickets');\n    console.log('Raw API response:', response);\n    return response.data;\n  } catch (error) {\n    console.error('Error in raw ticket fetch:', error);\n    return { error };\n  }\n};\n\nexport const getTickets = async (dateRange?: { startDate?: Date, endDate?: Date }): Promise<Ticket[]> => {\n  // Build query parameters including date range if provided\n  let params: Record<string, string> = {};\n  \n  if (dateRange) {\n    if (dateRange.startDate) {\n      params.startDate = dateRange.startDate.toISOString().split('T')[0];\n    }\n    if (dateRange.endDate) {\n      params.endDate = dateRange.endDate.toISOString().split('T')[0];\n    }\n  }\n  \n  console.log('Fetching tickets with params:', params);\n  \n  // Convert params object to URL search params\n  const queryString = Object.keys(params)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n    .join('&');\n  \n  const url = queryString ? `/tickets?${queryString}` : '/tickets';\n  \n  try {\n    const response = await api.get(url);\n    console.log('Full API response:', response);\n    \n    // Check if we have a response message indicating auth issues\n    if (response.data && response.data.message === \"Please authenticate.\") {\n      console.error('Authentication error when fetching tickets');\n      // Force re-login\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n      return [];\n    }\n    \n    // Check if response.data is an object with a tickets property\n    if (response.data && typeof response.data === 'object' && Array.isArray(response.data.tickets)) {\n      console.log(`Received ${response.data.tickets.length} tickets from API`);\n      return response.data.tickets;\n    }\n    // Fallback for backward compatibility if the API directly returns an array\n    if (Array.isArray(response.data)) {\n      console.log(`Received ${response.data.length} tickets from API (legacy format)`);\n      return response.data;\n    }\n    // If neither condition is met, return an empty array\n    console.error('Unexpected response format from /tickets endpoint:', response.data);\n    return [];\n  } catch (error) {\n    console.error('Error fetching tickets:', error);\n    return [];\n  }\n};\n\nexport const updateTicketStatus = async (ticketId: string, status: string): Promise<Ticket> => {\n  const response = await api.put<Ticket>(`/tickets/${ticketId}`, { status });\n  return response.data;\n};\n\nexport const updateTicket = async (ticketId: string, updateData: Partial<Ticket>): Promise<Ticket> => {\n  const formData = new FormData();\n  \n  // Add basic ticket data if provided\n  if (updateData.title) formData.append('title', updateData.title);\n  if (updateData.description) formData.append('description', updateData.description);\n  if (updateData.status) formData.append('status', updateData.status);\n  if (updateData.department) formData.append('department', updateData.department);\n  if (updateData.chemicalConfig) formData.append('chemicalConfig', JSON.stringify(updateData.chemicalConfig));\n  \n  // Add new files if they exist\n  if (updateData.attachments && updateData.attachments instanceof FileList) {\n    Array.from(updateData.attachments).forEach(file => {\n      formData.append('files', file);\n    });\n  }\n\n  const response = await api.put<Ticket>(`/tickets/${ticketId}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAsC,OAAO;AAGzD,MAAMC,YAAY,GAAG,2BAA2B;AAchD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAkC,IAAK;EACnE,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,IAAID,MAAM,CAACL,OAAO,EAAE;IAC3BK,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMK,KAAK,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,QAAgB,KAA6B;EACzF,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAgB,aAAa,EAAE;IAAEH,QAAQ;IAAEC;EAAS,CAAC,CAAC;EACrF,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAOC,UAAqE,IAAsB;EAC5H,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;EAE/B;EACAD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,UAAU,CAACI,KAAK,CAAC;EAC1CH,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEH,UAAU,CAACK,WAAW,CAAC;EACtDJ,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEH,UAAU,CAACM,WAAW,CAAC;EACtDL,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAEH,UAAU,CAACO,UAAU,CAAC;EACpDN,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEK,IAAI,CAACC,SAAS,CAACT,UAAU,CAACU,cAAc,CAAC,CAAC;;EAE5E;EACA,IAAIV,UAAU,CAACW,WAAW,IAAIX,UAAU,CAACW,WAAW,YAAYC,QAAQ,EAAE;IACxEC,KAAK,CAACC,IAAI,CAACd,UAAU,CAACW,WAAW,CAAC,CAACI,OAAO,CAACC,IAAI,IAAI;MACjDf,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEa,IAAI,CAAC;IAChC,CAAC,CAAC;EACJ;EAEA,MAAMpB,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAS,UAAU,EAAEI,QAAQ,EAAE;IAC5DlB,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOa,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMmB,gBAAgB,GAAG,MAAAA,CAAA,KAA0B;EACxDC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;EACrD,IAAI;IACF,MAAMvB,QAAQ,GAAG,MAAMhB,GAAG,CAACwC,GAAG,CAAC,UAAU,CAAC;IAC1CF,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEvB,QAAQ,CAAC;IAC1C,OAAOA,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOuB,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO;MAAEA;IAAM,CAAC;EAClB;AACF,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAOC,SAAgD,IAAwB;EACvG;EACA,IAAIC,MAA8B,GAAG,CAAC,CAAC;EAEvC,IAAID,SAAS,EAAE;IACb,IAAIA,SAAS,CAACE,SAAS,EAAE;MACvBD,MAAM,CAACC,SAAS,GAAGF,SAAS,CAACE,SAAS,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpE;IACA,IAAIJ,SAAS,CAACK,OAAO,EAAE;MACrBJ,MAAM,CAACI,OAAO,GAAGL,SAAS,CAACK,OAAO,CAACF,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChE;EACF;EAEAT,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEK,MAAM,CAAC;;EAEpD;EACA,MAAMK,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACP,MAAM,CAAC,CACpCQ,GAAG,CAACC,GAAG,IAAI,GAAGC,kBAAkB,CAACD,GAAG,CAAC,IAAIC,kBAAkB,CAACV,MAAM,CAACS,GAAG,CAAC,CAAC,EAAE,CAAC,CAC3EE,IAAI,CAAC,GAAG,CAAC;EAEZ,MAAMC,GAAG,GAAGP,WAAW,GAAG,YAAYA,WAAW,EAAE,GAAG,UAAU;EAEhE,IAAI;IACF,MAAMjC,QAAQ,GAAG,MAAMhB,GAAG,CAACwC,GAAG,CAACgB,GAAG,CAAC;IACnClB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEvB,QAAQ,CAAC;;IAE3C;IACA,IAAIA,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACuC,OAAO,KAAK,sBAAsB,EAAE;MACrEnB,OAAO,CAACG,KAAK,CAAC,4CAA4C,CAAC;MAC3D;MACA/B,YAAY,CAACgD,UAAU,CAAC,OAAO,CAAC;MAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MAC/B,OAAO,EAAE;IACX;;IAEA;IACA,IAAI7C,QAAQ,CAACE,IAAI,IAAI,OAAOF,QAAQ,CAACE,IAAI,KAAK,QAAQ,IAAIe,KAAK,CAAC6B,OAAO,CAAC9C,QAAQ,CAACE,IAAI,CAAC6C,OAAO,CAAC,EAAE;MAC9FzB,OAAO,CAACC,GAAG,CAAC,YAAYvB,QAAQ,CAACE,IAAI,CAAC6C,OAAO,CAACC,MAAM,mBAAmB,CAAC;MACxE,OAAOhD,QAAQ,CAACE,IAAI,CAAC6C,OAAO;IAC9B;IACA;IACA,IAAI9B,KAAK,CAAC6B,OAAO,CAAC9C,QAAQ,CAACE,IAAI,CAAC,EAAE;MAChCoB,OAAO,CAACC,GAAG,CAAC,YAAYvB,QAAQ,CAACE,IAAI,CAAC8C,MAAM,mCAAmC,CAAC;MAChF,OAAOhD,QAAQ,CAACE,IAAI;IACtB;IACA;IACAoB,OAAO,CAACG,KAAK,CAAC,oDAAoD,EAAEzB,QAAQ,CAACE,IAAI,CAAC;IAClF,OAAO,EAAE;EACX,CAAC,CAAC,OAAOuB,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMwB,kBAAkB,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,MAAc,KAAsB;EAC7F,MAAMnD,QAAQ,GAAG,MAAMhB,GAAG,CAACoE,GAAG,CAAS,YAAYF,QAAQ,EAAE,EAAE;IAAEC;EAAO,CAAC,CAAC;EAC1E,OAAOnD,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMmD,YAAY,GAAG,MAAAA,CAAOH,QAAgB,EAAEI,UAA2B,KAAsB;EACpG,MAAMjD,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;EAE/B;EACA,IAAIgD,UAAU,CAAC9C,KAAK,EAAEH,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE+C,UAAU,CAAC9C,KAAK,CAAC;EAChE,IAAI8C,UAAU,CAAC7C,WAAW,EAAEJ,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAE+C,UAAU,CAAC7C,WAAW,CAAC;EAClF,IAAI6C,UAAU,CAACH,MAAM,EAAE9C,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAE+C,UAAU,CAACH,MAAM,CAAC;EACnE,IAAIG,UAAU,CAAC3C,UAAU,EAAEN,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAE+C,UAAU,CAAC3C,UAAU,CAAC;EAC/E,IAAI2C,UAAU,CAACxC,cAAc,EAAET,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEK,IAAI,CAACC,SAAS,CAACyC,UAAU,CAACxC,cAAc,CAAC,CAAC;;EAE3G;EACA,IAAIwC,UAAU,CAACvC,WAAW,IAAIuC,UAAU,CAACvC,WAAW,YAAYC,QAAQ,EAAE;IACxEC,KAAK,CAACC,IAAI,CAACoC,UAAU,CAACvC,WAAW,CAAC,CAACI,OAAO,CAACC,IAAI,IAAI;MACjDf,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEa,IAAI,CAAC;IAChC,CAAC,CAAC;EACJ;EAEA,MAAMpB,QAAQ,GAAG,MAAMhB,GAAG,CAACoE,GAAG,CAAS,YAAYF,QAAQ,EAAE,EAAE7C,QAAQ,EAAE;IACvElB,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOa,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,eAAelB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}