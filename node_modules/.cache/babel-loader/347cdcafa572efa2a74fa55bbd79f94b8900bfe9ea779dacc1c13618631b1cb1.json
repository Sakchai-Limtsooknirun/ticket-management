{"ast":null,"code":"var _jsxFileName = \"/Users/a667227/Desktop/Work/ticket-management/src/components/TaskBoard.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport '../styles/TaskBoard.css';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Toast from './Toast';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Updated StrictModeDroppable component to fix React 18 warnings\n// This is a compatibility wrapper for react-beautiful-dnd in React 18 with StrictMode\nconst StrictModeDroppable = ({\n  children,\n  ...props\n}) => {\n  _s();\n  const [enabled, setEnabled] = useState(false);\n  useEffect(() => {\n    // Wait until after client-side hydration to enable\n    const animation = requestAnimationFrame(() => {\n      setEnabled(true);\n    });\n    return () => {\n      cancelAnimationFrame(animation);\n    };\n  }, []);\n  if (!enabled) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(Droppable, {\n    ...props,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n};\n_s(StrictModeDroppable, \"KO045EdmUKRrcVNzr+fxbg9aW04=\");\n_c = StrictModeDroppable;\nconst TaskBoard = ({\n  tickets,\n  onStatusChange,\n  currentUser\n}) => {\n  _s2();\n  const columns = ['DRAFT', 'PENDING', 'APPROVED', 'REJECTED'];\n  const [isDragging, setIsDragging] = useState(false);\n  const [toast, setToast] = useState({\n    message: '',\n    visible: false\n  });\n  const navigate = useNavigate();\n\n  // State for date filter\n  const [dateRange, setDateRange] = useState(() => {\n    const end = new Date();\n    const start = new Date();\n    start.setDate(start.getDate() - 30); // Default 30 days back\n    return {\n      startDate: start,\n      endDate: end\n    };\n  });\n\n  // State for pagination per column\n  const [pagination, setPagination] = useState({\n    'DRAFT': {\n      page: 1,\n      limit: 20\n    },\n    'PENDING': {\n      page: 1,\n      limit: 20\n    },\n    'APPROVED': {\n      page: 1,\n      limit: 20\n    },\n    'REJECTED': {\n      page: 1,\n      limit: 20\n    }\n  });\n\n  // Filter tickets based on user role\n  const filteredTickets = tickets.filter(ticket => {\n    // Date range filter\n    const ticketDate = new Date(ticket.requestDate || '');\n    if (ticketDate < dateRange.startDate || ticketDate > dateRange.endDate) {\n      return false;\n    }\n\n    // User role filter\n    if (currentUser.role === 'ADMIN') return true;\n    if (currentUser.role === 'APPROVER') {\n      // Approvers can see all tickets in all statuses\n      return true;\n    }\n    return ticket.requesterId === currentUser._id;\n  });\n\n  // Group tickets by status\n  const ticketsByStatus = columns.reduce((acc, status) => {\n    acc[status] = filteredTickets.filter(ticket => ticket.status === status);\n    return acc;\n  }, {});\n\n  // Get visible tickets per column with pagination\n  const getVisibleTickets = status => {\n    const {\n      page,\n      limit\n    } = pagination[status];\n    const start = (page - 1) * limit;\n    const end = start + limit;\n    return ticketsByStatus[status].slice(start, end);\n  };\n\n  // Handle page change for a column\n  const handlePageChange = (status, increment) => {\n    setPagination(prev => {\n      const columnPagination = {\n        ...prev[status]\n      };\n      columnPagination.page += increment;\n\n      // Ensure page is within valid range\n      const maxPage = Math.ceil(ticketsByStatus[status].length / columnPagination.limit) || 1;\n      if (columnPagination.page < 1) columnPagination.page = 1;\n      if (columnPagination.page > maxPage) columnPagination.page = maxPage;\n      return {\n        ...prev,\n        [status]: columnPagination\n      };\n    });\n  };\n\n  // Handle date filter changes\n  const handleDateFilterChange = (type, date) => {\n    setDateRange(prev => ({\n      ...prev,\n      [type === 'start' ? 'startDate' : 'endDate']: date\n    }));\n\n    // Reset pagination when filter changes\n    setPagination({\n      'DRAFT': {\n        page: 1,\n        limit: 20\n      },\n      'PENDING': {\n        page: 1,\n        limit: 20\n      },\n      'APPROVED': {\n        page: 1,\n        limit: 20\n      },\n      'REJECTED': {\n        page: 1,\n        limit: 20\n      }\n    });\n  };\n\n  // Check if the user can move the ticket from source to destination status\n  const canMoveTicket = (ticket, sourceStatus, destinationStatus) => {\n    const role = currentUser.role;\n\n    // ADMIN can move tickets freely between any status\n    if (role === 'ADMIN') return true;\n\n    // APPROVER can only move tickets forward in the workflow, but cannot move from DRAFT\n    if (role === 'APPROVER') {\n      // Define workflow order for all status determinations\n      const workflowOrder = {\n        'DRAFT': 0,\n        'PENDING': 1,\n        'APPROVED': 2,\n        'REJECTED': 2 // APPROVED and REJECTED are at the same level\n      };\n\n      // Approvers can move their own tickets with some restrictions\n      if (ticket.requesterId === currentUser._id) {\n        // Prevent moving backward from APPROVED or REJECTED to earlier statuses\n        if ((sourceStatus === 'APPROVED' || sourceStatus === 'REJECTED') && (destinationStatus === 'PENDING' || destinationStatus === 'DRAFT')) {\n          return false;\n        }\n        return true; // Allow all other movements for own tickets\n      }\n\n      // For other people's tickets, check if the move is forward in the workflow\n      return workflowOrder[destinationStatus] > workflowOrder[sourceStatus];\n    }\n\n    // REQUESTER can only move their own tickets from DRAFT to PENDING\n    if (role === 'REQUESTER') {\n      if (ticket.requesterId === currentUser._id && sourceStatus === 'DRAFT' && destinationStatus === 'PENDING') {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  };\n  const getRequesterName = ticket => {\n    var _ticket$requester;\n    return ((_ticket$requester = ticket.requester) === null || _ticket$requester === void 0 ? void 0 : _ticket$requester.fullName) || 'Unknown User';\n  };\n  const handleDragEnd = result => {\n    setIsDragging(false);\n    const {\n      draggableId,\n      source,\n      destination\n    } = result;\n\n    // Drop outside any droppable area or same position\n    if (!destination || source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    }\n\n    // The draggableId is the ticket ID\n    const ticketId = draggableId;\n\n    // Source and destination are the status columns\n    const sourceStatus = source.droppableId;\n    const destinationStatus = destination.droppableId;\n    const ticket = tickets.find(t => t._id === ticketId);\n    if (!ticket) return;\n\n    // Check if the user has permission to move the ticket\n    if (canMoveTicket(ticket, sourceStatus, destinationStatus)) {\n      onStatusChange(ticketId, destinationStatus);\n    } else {\n      // Show toast notification for permission error\n      setToast({\n        message: `You don't have permission to move this ticket to ${destinationStatus} status`,\n        visible: true\n      });\n    }\n  };\n  const handleDragStart = () => {\n    setIsDragging(true);\n  };\n\n  // Handle closing the toast\n  const handleCloseToast = () => {\n    setToast({\n      ...toast,\n      visible: false\n    });\n  };\n  const checkDragDisabled = (ticket, status) => {\n    // ADMIN can move any ticket\n    if (currentUser.role === 'ADMIN') return false;\n\n    // APPROVER permissions\n    if (currentUser.role === 'APPROVER') {\n      // Allow APPROVERs to drag their own tickets from any status\n      if (ticket.requesterId === currentUser._id) return false;\n\n      // APPROVERs cannot drag other people's tickets that are in DRAFT status\n      return status === 'DRAFT';\n    }\n\n    // REQUESTER can only move their own tickets from DRAFT to PENDING\n    if (currentUser.role === 'REQUESTER') {\n      return !(ticket.requesterId === currentUser._id && status === 'DRAFT');\n    }\n    return true;\n  };\n\n  // Add a click handler to navigate to ticket detail\n  const handleTicketClick = ticketId => {\n    if (!isDragging) {\n      navigate(`/tickets/${ticketId}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [toast.visible && /*#__PURE__*/_jsxDEV(Toast, {\n      message: toast.message,\n      type: \"error\",\n      onClose: handleCloseToast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taskboard-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-filter\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"From:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: dateRange.startDate.toISOString().split('T')[0],\n            onChange: e => handleDateFilterChange('start', new Date(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"To:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: dateRange.endDate.toISOString().split('T')[0],\n            onChange: e => handleDateFilterChange('end', new Date(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      onDragStart: handleDragStart,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-board\",\n        children: columns.map(status => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"column-title\",\n            children: [status, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ticket-count\",\n              children: [\"(\", ticketsByStatus[status].length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StrictModeDroppable, {\n            droppableId: status,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.droppableProps,\n              className: `task-list ${snapshot.isDraggingOver ? 'drop-allowed' : ''}`,\n              children: [getVisibleTickets(status).map((ticket, index) => {\n                // Determine if this ticket can be dragged\n                const isDragDisabled = checkDragDisabled(ticket, status);\n                return /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: ticket._id,\n                  index: index,\n                  isDragDisabled: isDragDisabled,\n                  children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    ref: provided.innerRef,\n                    ...provided.draggableProps,\n                    ...provided.dragHandleProps,\n                    className: `task-card ${snapshot.isDragging ? 'is-dragging' : ''} ${isDragDisabled ? 'not-draggable' : ''}`,\n                    onClick: () => handleTicketClick(ticket._id),\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"task-priority\",\n                      \"data-priority\": ticket.department\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 314,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                      children: ticket.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 315,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: ticket.description\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 316,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"task-meta\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"assignee\",\n                        children: getRequesterName(ticket)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 318,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"due-date\",\n                        children: ticket.requestDate ? new Date(ticket.requestDate).toLocaleDateString() : 'No date'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 319,\n                        columnNumber: 33\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 317,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 307,\n                    columnNumber: 29\n                  }, this)\n                }, ticket._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 300,\n                  columnNumber: 25\n                }, this);\n              }), provided.placeholder, ticketsByStatus[status].length > pagination[status].limit && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"column-pagination\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handlePageChange(status, -1),\n                  disabled: pagination[status].page === 1,\n                  className: \"pagination-btn\",\n                  children: \"\\xAB Prev\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"page-indicator\",\n                  children: [pagination[status].page, \" /\", Math.ceil(ticketsByStatus[status].length / pagination[status].limit)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 340,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handlePageChange(status, 1),\n                  disabled: pagination[status].page >= Math.ceil(ticketsByStatus[status].length / pagination[status].limit),\n                  className: \"pagination-btn\",\n                  children: \"Next \\xBB\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this)]\n        }, status, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s2(TaskBoard, \"vdbfjhV+aMrqHcPvzODysH/7Wk4=\", false, function () {\n  return [useNavigate];\n});\n_c2 = TaskBoard;\nexport default TaskBoard;\nvar _c, _c2;\n$RefreshReg$(_c, \"StrictModeDroppable\");\n$RefreshReg$(_c2, \"TaskBoard\");","map":{"version":3,"names":["useState","useEffect","DragDropContext","Droppable","Draggable","Toast","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","StrictModeDroppable","children","props","_s","enabled","setEnabled","animation","requestAnimationFrame","cancelAnimationFrame","fileName","_jsxFileName","lineNumber","columnNumber","_c","TaskBoard","tickets","onStatusChange","currentUser","_s2","columns","isDragging","setIsDragging","toast","setToast","message","visible","navigate","dateRange","setDateRange","end","Date","start","setDate","getDate","startDate","endDate","pagination","setPagination","page","limit","filteredTickets","filter","ticket","ticketDate","requestDate","role","requesterId","_id","ticketsByStatus","reduce","acc","status","getVisibleTickets","slice","handlePageChange","increment","prev","columnPagination","maxPage","Math","ceil","length","handleDateFilterChange","type","date","canMoveTicket","sourceStatus","destinationStatus","workflowOrder","getRequesterName","_ticket$requester","requester","fullName","handleDragEnd","result","draggableId","source","destination","droppableId","index","ticketId","find","t","handleDragStart","handleCloseToast","checkDragDisabled","handleTicketClick","onClose","className","value","toISOString","split","onChange","e","target","onDragEnd","onDragStart","map","provided","snapshot","ref","innerRef","droppableProps","isDraggingOver","isDragDisabled","draggableProps","dragHandleProps","onClick","department","title","description","toLocaleDateString","placeholder","disabled","_c2","$RefreshReg$"],"sources":["/Users/a667227/Desktop/Work/ticket-management/src/components/TaskBoard.tsx"],"sourcesContent":["import { FC, useState, useEffect, ReactElement, useCallback } from 'react';\nimport '../styles/TaskBoard.css';\nimport { Ticket, TicketStatus, User } from '../types/system';\nimport { DragDropContext, Droppable, Draggable, DropResult, DroppableProps, DroppableProvided, DroppableStateSnapshot } from 'react-beautiful-dnd';\nimport Toast from './Toast';\nimport { useNavigate } from 'react-router-dom';\n\ninterface TaskBoardProps {\n  tickets: Ticket[];\n  onStatusChange: (ticketId: string, newStatus: TicketStatus) => void;\n  currentUser: User;\n}\n\n// Updated StrictModeDroppable component to fix React 18 warnings\n// This is a compatibility wrapper for react-beautiful-dnd in React 18 with StrictMode\nconst StrictModeDroppable = ({ children, ...props }: DroppableProps & { children: (provided: DroppableProvided, snapshot: DroppableStateSnapshot) => ReactElement }) => {\n  const [enabled, setEnabled] = useState(false);\n  \n  useEffect(() => {\n    // Wait until after client-side hydration to enable\n    const animation = requestAnimationFrame(() => {\n      setEnabled(true);\n    });\n    \n    return () => {\n      cancelAnimationFrame(animation);\n    };\n  }, []);\n  \n  if (!enabled) {\n    return null;\n  }\n  \n  return <Droppable {...props}>{children}</Droppable>;\n};\n\nconst TaskBoard: FC<TaskBoardProps> = ({ tickets, onStatusChange, currentUser }) => {\n  const columns: TicketStatus[] = ['DRAFT', 'PENDING', 'APPROVED', 'REJECTED'];\n  const [isDragging, setIsDragging] = useState(false);\n  const [toast, setToast] = useState<{ message: string; visible: boolean }>({\n    message: '',\n    visible: false\n  });\n  const navigate = useNavigate();\n  \n  // State for date filter\n  const [dateRange, setDateRange] = useState(() => {\n    const end = new Date();\n    const start = new Date();\n    start.setDate(start.getDate() - 30); // Default 30 days back\n    return { startDate: start, endDate: end };\n  });\n  \n  // State for pagination per column\n  const [pagination, setPagination] = useState<{[key in TicketStatus]: {page: number, limit: number}}>({\n    'DRAFT': {page: 1, limit: 20},\n    'PENDING': {page: 1, limit: 20},\n    'APPROVED': {page: 1, limit: 20},\n    'REJECTED': {page: 1, limit: 20}\n  });\n  \n  // Filter tickets based on user role\n  const filteredTickets = tickets.filter(ticket => {\n    // Date range filter\n    const ticketDate = new Date(ticket.requestDate || '');\n    if (ticketDate < dateRange.startDate || ticketDate > dateRange.endDate) {\n      return false;\n    }\n    \n    // User role filter\n    if (currentUser.role === 'ADMIN') return true;\n    if (currentUser.role === 'APPROVER') {\n      // Approvers can see all tickets in all statuses\n      return true;\n    }\n    return ticket.requesterId === currentUser._id;\n  });\n\n  // Group tickets by status\n  const ticketsByStatus = columns.reduce((acc, status) => {\n    acc[status] = filteredTickets.filter(ticket => ticket.status === status);\n    return acc;\n  }, {} as {[key in TicketStatus]: Ticket[]});\n  \n  // Get visible tickets per column with pagination\n  const getVisibleTickets = (status: TicketStatus) => {\n    const { page, limit } = pagination[status];\n    const start = (page - 1) * limit;\n    const end = start + limit;\n    return ticketsByStatus[status].slice(start, end);\n  };\n  \n  // Handle page change for a column\n  const handlePageChange = (status: TicketStatus, increment: number) => {\n    setPagination(prev => {\n      const columnPagination = {...prev[status]};\n      columnPagination.page += increment;\n      \n      // Ensure page is within valid range\n      const maxPage = Math.ceil(ticketsByStatus[status].length / columnPagination.limit) || 1;\n      if (columnPagination.page < 1) columnPagination.page = 1;\n      if (columnPagination.page > maxPage) columnPagination.page = maxPage;\n      \n      return {...prev, [status]: columnPagination};\n    });\n  };\n  \n  // Handle date filter changes\n  const handleDateFilterChange = (type: 'start' | 'end', date: Date) => {\n    setDateRange(prev => ({\n      ...prev,\n      [type === 'start' ? 'startDate' : 'endDate']: date\n    }));\n    \n    // Reset pagination when filter changes\n    setPagination({\n      'DRAFT': {page: 1, limit: 20},\n      'PENDING': {page: 1, limit: 20},\n      'APPROVED': {page: 1, limit: 20},\n      'REJECTED': {page: 1, limit: 20}\n    });\n  };\n\n  // Check if the user can move the ticket from source to destination status\n  const canMoveTicket = (\n    ticket: Ticket,\n    sourceStatus: TicketStatus,\n    destinationStatus: TicketStatus\n  ): boolean => {\n    const role = currentUser.role;\n    \n    // ADMIN can move tickets freely between any status\n    if (role === 'ADMIN') return true;\n    \n    // APPROVER can only move tickets forward in the workflow, but cannot move from DRAFT\n    if (role === 'APPROVER') {\n      // Define workflow order for all status determinations\n      const workflowOrder: { [key in TicketStatus]: number } = {\n        'DRAFT': 0,\n        'PENDING': 1,\n        'APPROVED': 2,\n        'REJECTED': 2  // APPROVED and REJECTED are at the same level\n      };\n      \n      // Approvers can move their own tickets with some restrictions\n      if (ticket.requesterId === currentUser._id) {\n        // Prevent moving backward from APPROVED or REJECTED to earlier statuses\n        if ((sourceStatus === 'APPROVED' || sourceStatus === 'REJECTED') && \n            (destinationStatus === 'PENDING' || destinationStatus === 'DRAFT')) {\n          return false;\n        }\n        return true; // Allow all other movements for own tickets\n      }\n      \n      // For other people's tickets, check if the move is forward in the workflow\n      return workflowOrder[destinationStatus] > workflowOrder[sourceStatus];\n    }\n    \n    // REQUESTER can only move their own tickets from DRAFT to PENDING\n    if (role === 'REQUESTER') {\n      if (ticket.requesterId === currentUser._id && sourceStatus === 'DRAFT' && destinationStatus === 'PENDING') {\n        return true;\n      }\n      return false;\n    }\n    \n    return false;\n  };\n\n  const getRequesterName = (ticket: Ticket): string => {\n    return ticket.requester?.fullName || 'Unknown User';\n  };\n\n  const handleDragEnd = (result: DropResult) => {\n    setIsDragging(false);\n    \n    const { draggableId, source, destination } = result;\n    \n    // Drop outside any droppable area or same position\n    if (!destination || \n        (source.droppableId === destination.droppableId && \n         source.index === destination.index)) {\n      return;\n    }\n    \n    // The draggableId is the ticket ID\n    const ticketId = draggableId;\n    \n    // Source and destination are the status columns\n    const sourceStatus = source.droppableId as TicketStatus;\n    const destinationStatus = destination.droppableId as TicketStatus;\n    \n    const ticket = tickets.find(t => t._id === ticketId);\n    \n    if (!ticket) return;\n    \n    // Check if the user has permission to move the ticket\n    if (canMoveTicket(ticket, sourceStatus, destinationStatus)) {\n      onStatusChange(ticketId, destinationStatus);\n    } else {\n      // Show toast notification for permission error\n      setToast({\n        message: `You don't have permission to move this ticket to ${destinationStatus} status`,\n        visible: true\n      });\n    }\n  };\n  \n  const handleDragStart = () => {\n    setIsDragging(true);\n  };\n\n  // Handle closing the toast\n  const handleCloseToast = () => {\n    setToast({ ...toast, visible: false });\n  };\n\n  const checkDragDisabled = (ticket: Ticket, status: TicketStatus): boolean => {\n    // ADMIN can move any ticket\n    if (currentUser.role === 'ADMIN') return false;\n    \n    // APPROVER permissions\n    if (currentUser.role === 'APPROVER') {\n      // Allow APPROVERs to drag their own tickets from any status\n      if (ticket.requesterId === currentUser._id) return false;\n      \n      // APPROVERs cannot drag other people's tickets that are in DRAFT status\n      return status === 'DRAFT';\n    }\n    \n    // REQUESTER can only move their own tickets from DRAFT to PENDING\n    if (currentUser.role === 'REQUESTER') {\n      return !(ticket.requesterId === currentUser._id && status === 'DRAFT');\n    }\n    \n    return true;\n  };\n\n  // Add a click handler to navigate to ticket detail\n  const handleTicketClick = (ticketId: string) => {\n    if (!isDragging) {\n      navigate(`/tickets/${ticketId}`);\n    }\n  };\n\n  return (\n    <>\n      {toast.visible && (\n        <Toast \n          message={toast.message} \n          type=\"error\" \n          onClose={handleCloseToast} \n        />\n      )}\n      \n      <div className=\"taskboard-controls\">\n        <div className=\"date-filter\">\n          <div className=\"filter-group\">\n            <label>From:</label>\n            <input \n              type=\"date\" \n              value={dateRange.startDate.toISOString().split('T')[0]}\n              onChange={(e) => handleDateFilterChange('start', new Date(e.target.value))}\n            />\n          </div>\n          <div className=\"filter-group\">\n            <label>To:</label>\n            <input \n              type=\"date\" \n              value={dateRange.endDate.toISOString().split('T')[0]}\n              onChange={(e) => handleDateFilterChange('end', new Date(e.target.value))}\n            />\n          </div>\n        </div>\n      </div>\n      \n      <DragDropContext onDragEnd={handleDragEnd} onDragStart={handleDragStart}>\n        <div className=\"task-board\">\n          {columns.map((status) => (\n            <div key={status} className=\"task-column\">\n              <h3 className=\"column-title\">\n                {status} \n                <span className=\"ticket-count\">\n                  ({ticketsByStatus[status].length})\n                </span>\n              </h3>\n              \n              <StrictModeDroppable droppableId={status}>\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    className={`task-list ${snapshot.isDraggingOver ? 'drop-allowed' : ''}`}\n                  >\n                    {getVisibleTickets(status).map((ticket, index) => {\n                      // Determine if this ticket can be dragged\n                      const isDragDisabled = checkDragDisabled(ticket, status);\n                        \n                      return (\n                        <Draggable \n                          key={ticket._id} \n                          draggableId={ticket._id}\n                          index={index}\n                          isDragDisabled={isDragDisabled}\n                        >\n                          {(provided, snapshot) => (\n                            <div\n                              ref={provided.innerRef}\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              className={`task-card ${snapshot.isDragging ? 'is-dragging' : ''} ${isDragDisabled ? 'not-draggable' : ''}`}\n                              onClick={() => handleTicketClick(ticket._id)}\n                            >\n                              <div className=\"task-priority\" data-priority={ticket.department}></div>\n                              <h4>{ticket.title}</h4>\n                              <p>{ticket.description}</p>\n                              <div className=\"task-meta\">\n                                <span className=\"assignee\">{getRequesterName(ticket)}</span>\n                                <span className=\"due-date\">\n                                  {ticket.requestDate ? new Date(ticket.requestDate).toLocaleDateString() : 'No date'}\n                                </span>\n                              </div>\n                            </div>\n                          )}\n                        </Draggable>\n                      );\n                    })}\n                    {provided.placeholder}\n                    \n                    {/* Pagination controls */}\n                    {ticketsByStatus[status].length > pagination[status].limit && (\n                      <div className=\"column-pagination\">\n                        <button \n                          onClick={() => handlePageChange(status, -1)}\n                          disabled={pagination[status].page === 1}\n                          className=\"pagination-btn\"\n                        >\n                          &laquo; Prev\n                        </button>\n                        <span className=\"page-indicator\">\n                          {pagination[status].page} / \n                          {Math.ceil(ticketsByStatus[status].length / pagination[status].limit)}\n                        </span>\n                        <button \n                          onClick={() => handlePageChange(status, 1)}\n                          disabled={\n                            pagination[status].page >= \n                            Math.ceil(ticketsByStatus[status].length / pagination[status].limit)\n                          }\n                          className=\"pagination-btn\"\n                        >\n                          Next &raquo;\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </StrictModeDroppable>\n            </div>\n          ))}\n        </div>\n      </DragDropContext>\n    </>\n  );\n};\n\nexport default TaskBoard; "],"mappings":";;;AAAA,SAAaA,QAAQ,EAAEC,SAAS,QAAmC,OAAO;AAC1E,OAAO,yBAAyB;AAEhC,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAA+E,qBAAqB;AAClJ,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAQ/C;AACA;AACA,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC,QAAQ;EAAE,GAAGC;AAAsH,CAAC,KAAK;EAAAC,EAAA;EACtK,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,SAAS,GAAGC,qBAAqB,CAAC,MAAM;MAC5CF,UAAU,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC;IAEF,OAAO,MAAM;MACXG,oBAAoB,CAACF,SAAS,CAAC;IACjC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACF,OAAO,EAAE;IACZ,OAAO,IAAI;EACb;EAEA,oBAAOP,OAAA,CAACL,SAAS;IAAA,GAAKU,KAAK;IAAAD,QAAA,EAAGA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAY,CAAC;AACrD,CAAC;AAACT,EAAA,CAnBIH,mBAAmB;AAAAa,EAAA,GAAnBb,mBAAmB;AAqBzB,MAAMc,SAA6B,GAAGA,CAAC;EAAEC,OAAO;EAAEC,cAAc;EAAEC;AAAY,CAAC,KAAK;EAAAC,GAAA;EAClF,MAAMC,OAAuB,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;EAC5E,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACiC,KAAK,EAAEC,QAAQ,CAAC,GAAGlC,QAAQ,CAAwC;IACxEmC,OAAO,EAAE,EAAE;IACXC,OAAO,EAAE;EACX,CAAC,CAAC;EACF,MAAMC,QAAQ,GAAG/B,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAM,CAACgC,SAAS,EAAEC,YAAY,CAAC,GAAGvC,QAAQ,CAAC,MAAM;IAC/C,MAAMwC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IACtB,MAAMC,KAAK,GAAG,IAAID,IAAI,CAAC,CAAC;IACxBC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACrC,OAAO;MAAEC,SAAS,EAAEH,KAAK;MAAEI,OAAO,EAAEN;IAAI,CAAC;EAC3C,CAAC,CAAC;;EAEF;EACA,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGhD,QAAQ,CAAyD;IACnG,OAAO,EAAE;MAACiD,IAAI,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAE,CAAC;IAC7B,SAAS,EAAE;MAACD,IAAI,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAE,CAAC;IAC/B,UAAU,EAAE;MAACD,IAAI,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAE,CAAC;IAChC,UAAU,EAAE;MAACD,IAAI,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAE;EACjC,CAAC,CAAC;;EAEF;EACA,MAAMC,eAAe,GAAGzB,OAAO,CAAC0B,MAAM,CAACC,MAAM,IAAI;IAC/C;IACA,MAAMC,UAAU,GAAG,IAAIb,IAAI,CAACY,MAAM,CAACE,WAAW,IAAI,EAAE,CAAC;IACrD,IAAID,UAAU,GAAGhB,SAAS,CAACO,SAAS,IAAIS,UAAU,GAAGhB,SAAS,CAACQ,OAAO,EAAE;MACtE,OAAO,KAAK;IACd;;IAEA;IACA,IAAIlB,WAAW,CAAC4B,IAAI,KAAK,OAAO,EAAE,OAAO,IAAI;IAC7C,IAAI5B,WAAW,CAAC4B,IAAI,KAAK,UAAU,EAAE;MACnC;MACA,OAAO,IAAI;IACb;IACA,OAAOH,MAAM,CAACI,WAAW,KAAK7B,WAAW,CAAC8B,GAAG;EAC/C,CAAC,CAAC;;EAEF;EACA,MAAMC,eAAe,GAAG7B,OAAO,CAAC8B,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAK;IACtDD,GAAG,CAACC,MAAM,CAAC,GAAGX,eAAe,CAACC,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACS,MAAM,KAAKA,MAAM,CAAC;IACxE,OAAOD,GAAG;EACZ,CAAC,EAAE,CAAC,CAAsC,CAAC;;EAE3C;EACA,MAAME,iBAAiB,GAAID,MAAoB,IAAK;IAClD,MAAM;MAAEb,IAAI;MAAEC;IAAM,CAAC,GAAGH,UAAU,CAACe,MAAM,CAAC;IAC1C,MAAMpB,KAAK,GAAG,CAACO,IAAI,GAAG,CAAC,IAAIC,KAAK;IAChC,MAAMV,GAAG,GAAGE,KAAK,GAAGQ,KAAK;IACzB,OAAOS,eAAe,CAACG,MAAM,CAAC,CAACE,KAAK,CAACtB,KAAK,EAAEF,GAAG,CAAC;EAClD,CAAC;;EAED;EACA,MAAMyB,gBAAgB,GAAGA,CAACH,MAAoB,EAAEI,SAAiB,KAAK;IACpElB,aAAa,CAACmB,IAAI,IAAI;MACpB,MAAMC,gBAAgB,GAAG;QAAC,GAAGD,IAAI,CAACL,MAAM;MAAC,CAAC;MAC1CM,gBAAgB,CAACnB,IAAI,IAAIiB,SAAS;;MAElC;MACA,MAAMG,OAAO,GAAGC,IAAI,CAACC,IAAI,CAACZ,eAAe,CAACG,MAAM,CAAC,CAACU,MAAM,GAAGJ,gBAAgB,CAAClB,KAAK,CAAC,IAAI,CAAC;MACvF,IAAIkB,gBAAgB,CAACnB,IAAI,GAAG,CAAC,EAAEmB,gBAAgB,CAACnB,IAAI,GAAG,CAAC;MACxD,IAAImB,gBAAgB,CAACnB,IAAI,GAAGoB,OAAO,EAAED,gBAAgB,CAACnB,IAAI,GAAGoB,OAAO;MAEpE,OAAO;QAAC,GAAGF,IAAI;QAAE,CAACL,MAAM,GAAGM;MAAgB,CAAC;IAC9C,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMK,sBAAsB,GAAGA,CAACC,IAAqB,EAAEC,IAAU,KAAK;IACpEpC,YAAY,CAAC4B,IAAI,KAAK;MACpB,GAAGA,IAAI;MACP,CAACO,IAAI,KAAK,OAAO,GAAG,WAAW,GAAG,SAAS,GAAGC;IAChD,CAAC,CAAC,CAAC;;IAEH;IACA3B,aAAa,CAAC;MACZ,OAAO,EAAE;QAACC,IAAI,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAE,CAAC;MAC7B,SAAS,EAAE;QAACD,IAAI,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAE,CAAC;MAC/B,UAAU,EAAE;QAACD,IAAI,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAE,CAAC;MAChC,UAAU,EAAE;QAACD,IAAI,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAE;IACjC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAM0B,aAAa,GAAGA,CACpBvB,MAAc,EACdwB,YAA0B,EAC1BC,iBAA+B,KACnB;IACZ,MAAMtB,IAAI,GAAG5B,WAAW,CAAC4B,IAAI;;IAE7B;IACA,IAAIA,IAAI,KAAK,OAAO,EAAE,OAAO,IAAI;;IAEjC;IACA,IAAIA,IAAI,KAAK,UAAU,EAAE;MACvB;MACA,MAAMuB,aAAgD,GAAG;QACvD,OAAO,EAAE,CAAC;QACV,SAAS,EAAE,CAAC;QACZ,UAAU,EAAE,CAAC;QACb,UAAU,EAAE,CAAC,CAAE;MACjB,CAAC;;MAED;MACA,IAAI1B,MAAM,CAACI,WAAW,KAAK7B,WAAW,CAAC8B,GAAG,EAAE;QAC1C;QACA,IAAI,CAACmB,YAAY,KAAK,UAAU,IAAIA,YAAY,KAAK,UAAU,MAC1DC,iBAAiB,KAAK,SAAS,IAAIA,iBAAiB,KAAK,OAAO,CAAC,EAAE;UACtE,OAAO,KAAK;QACd;QACA,OAAO,IAAI,CAAC,CAAC;MACf;;MAEA;MACA,OAAOC,aAAa,CAACD,iBAAiB,CAAC,GAAGC,aAAa,CAACF,YAAY,CAAC;IACvE;;IAEA;IACA,IAAIrB,IAAI,KAAK,WAAW,EAAE;MACxB,IAAIH,MAAM,CAACI,WAAW,KAAK7B,WAAW,CAAC8B,GAAG,IAAImB,YAAY,KAAK,OAAO,IAAIC,iBAAiB,KAAK,SAAS,EAAE;QACzG,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd;IAEA,OAAO,KAAK;EACd,CAAC;EAED,MAAME,gBAAgB,GAAI3B,MAAc,IAAa;IAAA,IAAA4B,iBAAA;IACnD,OAAO,EAAAA,iBAAA,GAAA5B,MAAM,CAAC6B,SAAS,cAAAD,iBAAA,uBAAhBA,iBAAA,CAAkBE,QAAQ,KAAI,cAAc;EACrD,CAAC;EAED,MAAMC,aAAa,GAAIC,MAAkB,IAAK;IAC5CrD,aAAa,CAAC,KAAK,CAAC;IAEpB,MAAM;MAAEsD,WAAW;MAAEC,MAAM;MAAEC;IAAY,CAAC,GAAGH,MAAM;;IAEnD;IACA,IAAI,CAACG,WAAW,IACXD,MAAM,CAACE,WAAW,KAAKD,WAAW,CAACC,WAAW,IAC9CF,MAAM,CAACG,KAAK,KAAKF,WAAW,CAACE,KAAM,EAAE;MACxC;IACF;;IAEA;IACA,MAAMC,QAAQ,GAAGL,WAAW;;IAE5B;IACA,MAAMT,YAAY,GAAGU,MAAM,CAACE,WAA2B;IACvD,MAAMX,iBAAiB,GAAGU,WAAW,CAACC,WAA2B;IAEjE,MAAMpC,MAAM,GAAG3B,OAAO,CAACkE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACnC,GAAG,KAAKiC,QAAQ,CAAC;IAEpD,IAAI,CAACtC,MAAM,EAAE;;IAEb;IACA,IAAIuB,aAAa,CAACvB,MAAM,EAAEwB,YAAY,EAAEC,iBAAiB,CAAC,EAAE;MAC1DnD,cAAc,CAACgE,QAAQ,EAAEb,iBAAiB,CAAC;IAC7C,CAAC,MAAM;MACL;MACA5C,QAAQ,CAAC;QACPC,OAAO,EAAE,oDAAoD2C,iBAAiB,SAAS;QACvF1C,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAM0D,eAAe,GAAGA,CAAA,KAAM;IAC5B9D,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;;EAED;EACA,MAAM+D,gBAAgB,GAAGA,CAAA,KAAM;IAC7B7D,QAAQ,CAAC;MAAE,GAAGD,KAAK;MAAEG,OAAO,EAAE;IAAM,CAAC,CAAC;EACxC,CAAC;EAED,MAAM4D,iBAAiB,GAAGA,CAAC3C,MAAc,EAAES,MAAoB,KAAc;IAC3E;IACA,IAAIlC,WAAW,CAAC4B,IAAI,KAAK,OAAO,EAAE,OAAO,KAAK;;IAE9C;IACA,IAAI5B,WAAW,CAAC4B,IAAI,KAAK,UAAU,EAAE;MACnC;MACA,IAAIH,MAAM,CAACI,WAAW,KAAK7B,WAAW,CAAC8B,GAAG,EAAE,OAAO,KAAK;;MAExD;MACA,OAAOI,MAAM,KAAK,OAAO;IAC3B;;IAEA;IACA,IAAIlC,WAAW,CAAC4B,IAAI,KAAK,WAAW,EAAE;MACpC,OAAO,EAAEH,MAAM,CAACI,WAAW,KAAK7B,WAAW,CAAC8B,GAAG,IAAII,MAAM,KAAK,OAAO,CAAC;IACxE;IAEA,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMmC,iBAAiB,GAAIN,QAAgB,IAAK;IAC9C,IAAI,CAAC5D,UAAU,EAAE;MACfM,QAAQ,CAAC,YAAYsD,QAAQ,EAAE,CAAC;IAClC;EACF,CAAC;EAED,oBACEnF,OAAA,CAAAE,SAAA;IAAAE,QAAA,GACGqB,KAAK,CAACG,OAAO,iBACZ5B,OAAA,CAACH,KAAK;MACJ8B,OAAO,EAAEF,KAAK,CAACE,OAAQ;MACvBuC,IAAI,EAAC,OAAO;MACZwB,OAAO,EAAEH;IAAiB;MAAA3E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CACF,eAEDf,OAAA;MAAK2F,SAAS,EAAC,oBAAoB;MAAAvF,QAAA,eACjCJ,OAAA;QAAK2F,SAAS,EAAC,aAAa;QAAAvF,QAAA,gBAC1BJ,OAAA;UAAK2F,SAAS,EAAC,cAAc;UAAAvF,QAAA,gBAC3BJ,OAAA;YAAAI,QAAA,EAAO;UAAK;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpBf,OAAA;YACEkE,IAAI,EAAC,MAAM;YACX0B,KAAK,EAAE9D,SAAS,CAACO,SAAS,CAACwD,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAE;YACvDC,QAAQ,EAAGC,CAAC,IAAK/B,sBAAsB,CAAC,OAAO,EAAE,IAAIhC,IAAI,CAAC+D,CAAC,CAACC,MAAM,CAACL,KAAK,CAAC;UAAE;YAAAhF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5E,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNf,OAAA;UAAK2F,SAAS,EAAC,cAAc;UAAAvF,QAAA,gBAC3BJ,OAAA;YAAAI,QAAA,EAAO;UAAG;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAClBf,OAAA;YACEkE,IAAI,EAAC,MAAM;YACX0B,KAAK,EAAE9D,SAAS,CAACQ,OAAO,CAACuD,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAE;YACrDC,QAAQ,EAAGC,CAAC,IAAK/B,sBAAsB,CAAC,KAAK,EAAE,IAAIhC,IAAI,CAAC+D,CAAC,CAACC,MAAM,CAACL,KAAK,CAAC;UAAE;YAAAhF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1E,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENf,OAAA,CAACN,eAAe;MAACwG,SAAS,EAAEtB,aAAc;MAACuB,WAAW,EAAEb,eAAgB;MAAAlF,QAAA,eACtEJ,OAAA;QAAK2F,SAAS,EAAC,YAAY;QAAAvF,QAAA,EACxBkB,OAAO,CAAC8E,GAAG,CAAE9C,MAAM,iBAClBtD,OAAA;UAAkB2F,SAAS,EAAC,aAAa;UAAAvF,QAAA,gBACvCJ,OAAA;YAAI2F,SAAS,EAAC,cAAc;YAAAvF,QAAA,GACzBkD,MAAM,eACPtD,OAAA;cAAM2F,SAAS,EAAC,cAAc;cAAAvF,QAAA,GAAC,GAC5B,EAAC+C,eAAe,CAACG,MAAM,CAAC,CAACU,MAAM,EAAC,GACnC;YAAA;cAAApD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,eAELf,OAAA,CAACG,mBAAmB;YAAC8E,WAAW,EAAE3B,MAAO;YAAAlD,QAAA,EACtCA,CAACiG,QAAQ,EAAEC,QAAQ,kBAClBtG,OAAA;cACEuG,GAAG,EAAEF,QAAQ,CAACG,QAAS;cAAA,GACnBH,QAAQ,CAACI,cAAc;cAC3Bd,SAAS,EAAE,aAAaW,QAAQ,CAACI,cAAc,GAAG,cAAc,GAAG,EAAE,EAAG;cAAAtG,QAAA,GAEvEmD,iBAAiB,CAACD,MAAM,CAAC,CAAC8C,GAAG,CAAC,CAACvD,MAAM,EAAEqC,KAAK,KAAK;gBAChD;gBACA,MAAMyB,cAAc,GAAGnB,iBAAiB,CAAC3C,MAAM,EAAES,MAAM,CAAC;gBAExD,oBACEtD,OAAA,CAACJ,SAAS;kBAERkF,WAAW,EAAEjC,MAAM,CAACK,GAAI;kBACxBgC,KAAK,EAAEA,KAAM;kBACbyB,cAAc,EAAEA,cAAe;kBAAAvG,QAAA,EAE9BA,CAACiG,QAAQ,EAAEC,QAAQ,kBAClBtG,OAAA;oBACEuG,GAAG,EAAEF,QAAQ,CAACG,QAAS;oBAAA,GACnBH,QAAQ,CAACO,cAAc;oBAAA,GACvBP,QAAQ,CAACQ,eAAe;oBAC5BlB,SAAS,EAAE,aAAaW,QAAQ,CAAC/E,UAAU,GAAG,aAAa,GAAG,EAAE,IAAIoF,cAAc,GAAG,eAAe,GAAG,EAAE,EAAG;oBAC5GG,OAAO,EAAEA,CAAA,KAAMrB,iBAAiB,CAAC5C,MAAM,CAACK,GAAG,CAAE;oBAAA9C,QAAA,gBAE7CJ,OAAA;sBAAK2F,SAAS,EAAC,eAAe;sBAAC,iBAAe9C,MAAM,CAACkE;oBAAW;sBAAAnG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM,CAAC,eACvEf,OAAA;sBAAAI,QAAA,EAAKyC,MAAM,CAACmE;oBAAK;sBAAApG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAK,CAAC,eACvBf,OAAA;sBAAAI,QAAA,EAAIyC,MAAM,CAACoE;oBAAW;sBAAArG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAI,CAAC,eAC3Bf,OAAA;sBAAK2F,SAAS,EAAC,WAAW;sBAAAvF,QAAA,gBACxBJ,OAAA;wBAAM2F,SAAS,EAAC,UAAU;wBAAAvF,QAAA,EAAEoE,gBAAgB,CAAC3B,MAAM;sBAAC;wBAAAjC,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAO,CAAC,eAC5Df,OAAA;wBAAM2F,SAAS,EAAC,UAAU;wBAAAvF,QAAA,EACvByC,MAAM,CAACE,WAAW,GAAG,IAAId,IAAI,CAACY,MAAM,CAACE,WAAW,CAAC,CAACmE,kBAAkB,CAAC,CAAC,GAAG;sBAAS;wBAAAtG,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAC/E,CAAC;oBAAA;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACJ,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACH;gBACN,GAvBI8B,MAAM,CAACK,GAAG;kBAAAtC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAwBN,CAAC;cAEhB,CAAC,CAAC,EACDsF,QAAQ,CAACc,WAAW,EAGpBhE,eAAe,CAACG,MAAM,CAAC,CAACU,MAAM,GAAGzB,UAAU,CAACe,MAAM,CAAC,CAACZ,KAAK,iBACxD1C,OAAA;gBAAK2F,SAAS,EAAC,mBAAmB;gBAAAvF,QAAA,gBAChCJ,OAAA;kBACE8G,OAAO,EAAEA,CAAA,KAAMrD,gBAAgB,CAACH,MAAM,EAAE,CAAC,CAAC,CAAE;kBAC5C8D,QAAQ,EAAE7E,UAAU,CAACe,MAAM,CAAC,CAACb,IAAI,KAAK,CAAE;kBACxCkD,SAAS,EAAC,gBAAgB;kBAAAvF,QAAA,EAC3B;gBAED;kBAAAQ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACTf,OAAA;kBAAM2F,SAAS,EAAC,gBAAgB;kBAAAvF,QAAA,GAC7BmC,UAAU,CAACe,MAAM,CAAC,CAACb,IAAI,EAAC,IACzB,EAACqB,IAAI,CAACC,IAAI,CAACZ,eAAe,CAACG,MAAM,CAAC,CAACU,MAAM,GAAGzB,UAAU,CAACe,MAAM,CAAC,CAACZ,KAAK,CAAC;gBAAA;kBAAA9B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACjE,CAAC,eACPf,OAAA;kBACE8G,OAAO,EAAEA,CAAA,KAAMrD,gBAAgB,CAACH,MAAM,EAAE,CAAC,CAAE;kBAC3C8D,QAAQ,EACN7E,UAAU,CAACe,MAAM,CAAC,CAACb,IAAI,IACvBqB,IAAI,CAACC,IAAI,CAACZ,eAAe,CAACG,MAAM,CAAC,CAACU,MAAM,GAAGzB,UAAU,CAACe,MAAM,CAAC,CAACZ,KAAK,CACpE;kBACDiD,SAAS,EAAC,gBAAgB;kBAAAvF,QAAA,EAC3B;gBAED;kBAAAQ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CACN;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE;UACN;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACkB,CAAC;QAAA,GA9EduC,MAAM;UAAA1C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA+EX,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACS,CAAC;EAAA,eAClB,CAAC;AAEP,CAAC;AAACM,GAAA,CAxUIJ,SAA6B;EAAA,QAOhBnB,WAAW;AAAA;AAAAuH,GAAA,GAPxBpG,SAA6B;AA0UnC,eAAeA,SAAS;AAAC,IAAAD,EAAA,EAAAqG,GAAA;AAAAC,YAAA,CAAAtG,EAAA;AAAAsG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}