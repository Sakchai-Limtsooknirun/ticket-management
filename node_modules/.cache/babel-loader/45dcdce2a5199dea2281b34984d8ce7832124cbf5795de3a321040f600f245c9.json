{"ast":null,"code":"var _jsxFileName = \"/Users/a667227/Desktop/Work/ticket-management/src/components/TaskBoard.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport '../styles/TaskBoard.css';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Toast from './Toast';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// StrictMode compatibility wrapper component for react-beautiful-dnd\n// This is needed because react-beautiful-dnd doesn't work well with React StrictMode\nconst StrictModeDroppable = ({\n  children,\n  ...props\n}) => {\n  _s();\n  const [enabled, setEnabled] = useState(false);\n  useEffect(() => {\n    // Wait until after client-side hydration to enable\n    const timeout = setTimeout(() => {\n      setEnabled(true);\n    }, 500);\n    return () => clearTimeout(timeout);\n  }, []);\n  if (!enabled) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(Droppable, {\n    ...props,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 10\n  }, this);\n};\n_s(StrictModeDroppable, \"KO045EdmUKRrcVNzr+fxbg9aW04=\");\n_c = StrictModeDroppable;\nconst TaskBoard = ({\n  tickets,\n  onStatusChange,\n  currentUser\n}) => {\n  _s2();\n  const columns = ['DRAFT', 'PENDING', 'APPROVED', 'REJECTED'];\n  const [isDragging, setIsDragging] = useState(false);\n  const [toast, setToast] = useState({\n    message: '',\n    visible: false\n  });\n  const navigate = useNavigate();\n\n  // Filter tickets based on user role\n  const filteredTickets = tickets.filter(ticket => {\n    if (currentUser.role === 'ADMIN') return true;\n    if (currentUser.role === 'APPROVER') {\n      // Approvers can see all tickets in all statuses\n      return true;\n    }\n    return ticket.requesterId === currentUser._id;\n  });\n\n  // Check if the user can move the ticket from source to destination status\n  const canMoveTicket = (ticket, sourceStatus, destinationStatus) => {\n    const role = currentUser.role;\n\n    // ADMIN can move tickets freely between any status\n    if (role === 'ADMIN') return true;\n\n    // APPROVER can only move tickets forward in the workflow, but cannot move from DRAFT\n    if (role === 'APPROVER') {\n      // Define workflow order for all status determinations\n      const workflowOrder = {\n        'DRAFT': 0,\n        'PENDING': 1,\n        'APPROVED': 2,\n        'REJECTED': 2 // APPROVED and REJECTED are at the same level\n      };\n\n      // Approvers can move their own tickets with some restrictions\n      if (ticket.requesterId === currentUser._id) {\n        // Prevent moving backward from APPROVED or REJECTED to earlier statuses\n        if ((sourceStatus === 'APPROVED' || sourceStatus === 'REJECTED') && (destinationStatus === 'PENDING' || destinationStatus === 'DRAFT')) {\n          return false;\n        }\n        return true; // Allow all other movements for own tickets\n      }\n\n      // For other people's tickets, check if the move is forward in the workflow\n      return workflowOrder[destinationStatus] > workflowOrder[sourceStatus];\n    }\n\n    // REQUESTER can only move their own tickets from DRAFT to PENDING\n    if (role === 'REQUESTER') {\n      if (ticket.requesterId === currentUser._id && sourceStatus === 'DRAFT' && destinationStatus === 'PENDING') {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  };\n  const getRequesterName = ticket => {\n    var _ticket$requester;\n    return ((_ticket$requester = ticket.requester) === null || _ticket$requester === void 0 ? void 0 : _ticket$requester.fullName) || 'Unknown User';\n  };\n  const handleDragEnd = result => {\n    setIsDragging(false);\n    const {\n      draggableId,\n      source,\n      destination\n    } = result;\n\n    // Drop outside any droppable area or same position\n    if (!destination || source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    }\n\n    // The draggableId is the ticket ID\n    const ticketId = draggableId;\n\n    // Source and destination are the status columns\n    const sourceStatus = source.droppableId;\n    const destinationStatus = destination.droppableId;\n    const ticket = tickets.find(t => t._id === ticketId);\n    if (!ticket) return;\n\n    // Check if the user has permission to move the ticket\n    if (canMoveTicket(ticket, sourceStatus, destinationStatus)) {\n      onStatusChange(ticketId, destinationStatus);\n    } else {\n      // Show toast notification for permission error\n      setToast({\n        message: `You don't have permission to move this ticket to ${destinationStatus} status`,\n        visible: true\n      });\n    }\n  };\n  const handleDragStart = () => {\n    setIsDragging(true);\n  };\n\n  // Handle closing the toast\n  const handleCloseToast = () => {\n    setToast({\n      ...toast,\n      visible: false\n    });\n  };\n  const checkDragDisabled = (ticket, status) => {\n    // ADMIN can move any ticket\n    if (currentUser.role === 'ADMIN') return false;\n\n    // APPROVER permissions\n    if (currentUser.role === 'APPROVER') {\n      // Allow APPROVERs to drag their own tickets from any status\n      if (ticket.requesterId === currentUser._id) return false;\n\n      // APPROVERs cannot drag other people's tickets that are in DRAFT status\n      return status === 'DRAFT';\n    }\n\n    // REQUESTER can only move their own tickets from DRAFT to PENDING\n    if (currentUser.role === 'REQUESTER') {\n      return !(ticket.requesterId === currentUser._id && status === 'DRAFT');\n    }\n    return true;\n  };\n\n  // Add a click handler to navigate to ticket detail\n  const handleTicketClick = ticketId => {\n    if (!isDragging) {\n      navigate(`/tickets/${ticketId}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [toast.visible && /*#__PURE__*/_jsxDEV(Toast, {\n      message: toast.message,\n      type: \"error\",\n      onClose: handleCloseToast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      onDragStart: handleDragStart,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-board\",\n        children: columns.map(status => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"column-title\",\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(StrictModeDroppable, {\n            droppableId: status,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.droppableProps,\n              className: `task-list ${snapshot.isDraggingOver ? 'drop-allowed' : ''}`,\n              children: [filteredTickets.filter(ticket => ticket.status === status).map((ticket, index) => {\n                // Determine if this ticket can be dragged\n                const isDragDisabled = checkDragDisabled(ticket, status);\n                return /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: ticket._id,\n                  index: index,\n                  isDragDisabled: isDragDisabled,\n                  children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    ref: provided.innerRef,\n                    ...provided.draggableProps,\n                    ...provided.dragHandleProps,\n                    className: `task-card ${snapshot.isDragging ? 'is-dragging' : ''} ${isDragDisabled ? 'not-draggable' : ''}`,\n                    onClick: () => handleTicketClick(ticket._id),\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"task-priority\",\n                      \"data-priority\": ticket.department\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 219,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                      children: ticket.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 220,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: ticket.description\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 221,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"task-meta\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"assignee\",\n                        children: getRequesterName(ticket)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 223,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"due-date\",\n                        children: ticket.requestDate ? new Date(ticket.requestDate).toLocaleDateString() : 'No date'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 224,\n                        columnNumber: 35\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 222,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 212,\n                    columnNumber: 31\n                  }, this)\n                }, ticket._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 27\n                }, this);\n              }), provided.placeholder]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this)]\n        }, status, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s2(TaskBoard, \"EAcgm3a4VShrkHgd3CEodbdKhYg=\", false, function () {\n  return [useNavigate];\n});\n_c2 = TaskBoard;\nexport default TaskBoard;\nvar _c, _c2;\n$RefreshReg$(_c, \"StrictModeDroppable\");\n$RefreshReg$(_c2, \"TaskBoard\");","map":{"version":3,"names":["useState","useEffect","DragDropContext","Droppable","Draggable","Toast","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","StrictModeDroppable","children","props","_s","enabled","setEnabled","timeout","setTimeout","clearTimeout","fileName","_jsxFileName","lineNumber","columnNumber","_c","TaskBoard","tickets","onStatusChange","currentUser","_s2","columns","isDragging","setIsDragging","toast","setToast","message","visible","navigate","filteredTickets","filter","ticket","role","requesterId","_id","canMoveTicket","sourceStatus","destinationStatus","workflowOrder","getRequesterName","_ticket$requester","requester","fullName","handleDragEnd","result","draggableId","source","destination","droppableId","index","ticketId","find","t","handleDragStart","handleCloseToast","checkDragDisabled","status","handleTicketClick","type","onClose","onDragEnd","onDragStart","className","map","provided","snapshot","ref","innerRef","droppableProps","isDraggingOver","isDragDisabled","draggableProps","dragHandleProps","onClick","department","title","description","requestDate","Date","toLocaleDateString","placeholder","_c2","$RefreshReg$"],"sources":["/Users/a667227/Desktop/Work/ticket-management/src/components/TaskBoard.tsx"],"sourcesContent":["import { FC, useState, useEffect, ReactElement } from 'react';\nimport '../styles/TaskBoard.css';\nimport { Ticket, TicketStatus, User } from '../types/system';\nimport { DragDropContext, Droppable, Draggable, DropResult, DroppableProps, DroppableProvided, DroppableStateSnapshot } from 'react-beautiful-dnd';\nimport Toast from './Toast';\nimport { useNavigate } from 'react-router-dom';\n\ninterface TaskBoardProps {\n  tickets: Ticket[];\n  onStatusChange: (ticketId: string, newStatus: TicketStatus) => void;\n  currentUser: User;\n}\n\n// StrictMode compatibility wrapper component for react-beautiful-dnd\n// This is needed because react-beautiful-dnd doesn't work well with React StrictMode\nconst StrictModeDroppable = ({ children, ...props }: DroppableProps & { children: (provided: DroppableProvided, snapshot: DroppableStateSnapshot) => ReactElement }) => {\n  const [enabled, setEnabled] = useState(false);\n  \n  useEffect(() => {\n    // Wait until after client-side hydration to enable\n    const timeout = setTimeout(() => {\n      setEnabled(true);\n    }, 500);\n    \n    return () => clearTimeout(timeout);\n  }, []);\n  \n  if (!enabled) {\n    return null;\n  }\n  \n  return <Droppable {...props}>{children}</Droppable>;\n};\n\nconst TaskBoard: FC<TaskBoardProps> = ({ tickets, onStatusChange, currentUser }) => {\n  const columns: TicketStatus[] = ['DRAFT', 'PENDING', 'APPROVED', 'REJECTED'];\n  const [isDragging, setIsDragging] = useState(false);\n  const [toast, setToast] = useState<{ message: string; visible: boolean }>({\n    message: '',\n    visible: false\n  });\n  const navigate = useNavigate();\n  \n  // Filter tickets based on user role\n  const filteredTickets = tickets.filter(ticket => {\n    if (currentUser.role === 'ADMIN') return true;\n    if (currentUser.role === 'APPROVER') {\n      // Approvers can see all tickets in all statuses\n      return true;\n    }\n    return ticket.requesterId === currentUser._id;\n  });\n\n  // Check if the user can move the ticket from source to destination status\n  const canMoveTicket = (\n    ticket: Ticket,\n    sourceStatus: TicketStatus,\n    destinationStatus: TicketStatus\n  ): boolean => {\n    const role = currentUser.role;\n    \n    // ADMIN can move tickets freely between any status\n    if (role === 'ADMIN') return true;\n    \n    // APPROVER can only move tickets forward in the workflow, but cannot move from DRAFT\n    if (role === 'APPROVER') {\n      // Define workflow order for all status determinations\n      const workflowOrder: { [key in TicketStatus]: number } = {\n        'DRAFT': 0,\n        'PENDING': 1,\n        'APPROVED': 2,\n        'REJECTED': 2  // APPROVED and REJECTED are at the same level\n      };\n      \n      // Approvers can move their own tickets with some restrictions\n      if (ticket.requesterId === currentUser._id) {\n        // Prevent moving backward from APPROVED or REJECTED to earlier statuses\n        if ((sourceStatus === 'APPROVED' || sourceStatus === 'REJECTED') && \n            (destinationStatus === 'PENDING' || destinationStatus === 'DRAFT')) {\n          return false;\n        }\n        return true; // Allow all other movements for own tickets\n      }\n      \n      // For other people's tickets, check if the move is forward in the workflow\n      return workflowOrder[destinationStatus] > workflowOrder[sourceStatus];\n    }\n    \n    // REQUESTER can only move their own tickets from DRAFT to PENDING\n    if (role === 'REQUESTER') {\n      if (ticket.requesterId === currentUser._id && sourceStatus === 'DRAFT' && destinationStatus === 'PENDING') {\n        return true;\n      }\n      return false;\n    }\n    \n    return false;\n  };\n\n  const getRequesterName = (ticket: Ticket): string => {\n    return ticket.requester?.fullName || 'Unknown User';\n  };\n\n  const handleDragEnd = (result: DropResult) => {\n    setIsDragging(false);\n    \n    const { draggableId, source, destination } = result;\n    \n    // Drop outside any droppable area or same position\n    if (!destination || \n        (source.droppableId === destination.droppableId && \n         source.index === destination.index)) {\n      return;\n    }\n    \n    // The draggableId is the ticket ID\n    const ticketId = draggableId;\n    \n    // Source and destination are the status columns\n    const sourceStatus = source.droppableId as TicketStatus;\n    const destinationStatus = destination.droppableId as TicketStatus;\n    \n    const ticket = tickets.find(t => t._id === ticketId);\n    \n    if (!ticket) return;\n    \n    // Check if the user has permission to move the ticket\n    if (canMoveTicket(ticket, sourceStatus, destinationStatus)) {\n      onStatusChange(ticketId, destinationStatus);\n    } else {\n      // Show toast notification for permission error\n      setToast({\n        message: `You don't have permission to move this ticket to ${destinationStatus} status`,\n        visible: true\n      });\n    }\n  };\n  \n  const handleDragStart = () => {\n    setIsDragging(true);\n  };\n\n  // Handle closing the toast\n  const handleCloseToast = () => {\n    setToast({ ...toast, visible: false });\n  };\n\n  const checkDragDisabled = (ticket: Ticket, status: TicketStatus): boolean => {\n    // ADMIN can move any ticket\n    if (currentUser.role === 'ADMIN') return false;\n    \n    // APPROVER permissions\n    if (currentUser.role === 'APPROVER') {\n      // Allow APPROVERs to drag their own tickets from any status\n      if (ticket.requesterId === currentUser._id) return false;\n      \n      // APPROVERs cannot drag other people's tickets that are in DRAFT status\n      return status === 'DRAFT';\n    }\n    \n    // REQUESTER can only move their own tickets from DRAFT to PENDING\n    if (currentUser.role === 'REQUESTER') {\n      return !(ticket.requesterId === currentUser._id && status === 'DRAFT');\n    }\n    \n    return true;\n  };\n\n  // Add a click handler to navigate to ticket detail\n  const handleTicketClick = (ticketId: string) => {\n    if (!isDragging) {\n      navigate(`/tickets/${ticketId}`);\n    }\n  };\n\n  return (\n    <>\n      {toast.visible && (\n        <Toast \n          message={toast.message} \n          type=\"error\" \n          onClose={handleCloseToast} \n        />\n      )}\n      \n      <DragDropContext onDragEnd={handleDragEnd} onDragStart={handleDragStart}>\n        <div className=\"task-board\">\n          {columns.map((status) => (\n            <div key={status} className=\"task-column\">\n              <h3 className=\"column-title\">{status}</h3>\n              <StrictModeDroppable droppableId={status}>\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    className={`task-list ${snapshot.isDraggingOver ? 'drop-allowed' : ''}`}\n                  >\n                    {filteredTickets\n                      .filter((ticket) => ticket.status === status)\n                      .map((ticket, index) => {\n                        // Determine if this ticket can be dragged\n                        const isDragDisabled = checkDragDisabled(ticket, status);\n                          \n                        return (\n                          <Draggable \n                            key={ticket._id} \n                            draggableId={ticket._id}\n                            index={index}\n                            isDragDisabled={isDragDisabled}\n                          >\n                            {(provided, snapshot) => (\n                              <div\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                className={`task-card ${snapshot.isDragging ? 'is-dragging' : ''} ${isDragDisabled ? 'not-draggable' : ''}`}\n                                onClick={() => handleTicketClick(ticket._id)}\n                              >\n                                <div className=\"task-priority\" data-priority={ticket.department}></div>\n                                <h4>{ticket.title}</h4>\n                                <p>{ticket.description}</p>\n                                <div className=\"task-meta\">\n                                  <span className=\"assignee\">{getRequesterName(ticket)}</span>\n                                  <span className=\"due-date\">\n                                    {ticket.requestDate ? new Date(ticket.requestDate).toLocaleDateString() : 'No date'}\n                                  </span>\n                                </div>\n                              </div>\n                            )}\n                          </Draggable>\n                        );\n                      })}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </StrictModeDroppable>\n            </div>\n          ))}\n        </div>\n      </DragDropContext>\n    </>\n  );\n};\n\nexport default TaskBoard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}