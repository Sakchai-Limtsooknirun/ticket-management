{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5001/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const login = async (username, password) => {\n  const response = await api.post('/auth/login', {\n    username,\n    password\n  });\n  return response.data;\n};\nexport const createTicket = async ticketData => {\n  const formData = new FormData();\n\n  // Add ticket data\n  formData.append('title', ticketData.title);\n  formData.append('description', ticketData.description);\n  formData.append('chemicalConfig', JSON.stringify(ticketData.chemicalConfig));\n\n  // Add files if they exist\n  if (ticketData.attachments) {\n    ticketData.attachments.forEach(file => {\n      formData.append('files', file);\n    });\n  }\n  const response = await api.post('/tickets', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\nexport const getTickets = async () => {\n  const response = await api.get('/tickets');\n  return response.data;\n};\nexport const updateTicketStatus = async (ticketId, status) => {\n  const response = await api.patch(`/tickets/${ticketId}/status`, {\n    status\n  });\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","login","username","password","response","post","data","createTicket","ticketData","formData","FormData","append","title","description","JSON","stringify","chemicalConfig","attachments","forEach","file","getTickets","get","updateTicketStatus","ticketId","status","patch"],"sources":["/Users/a667227/Desktop/Work/web2-announcement/src/services/api.ts"],"sourcesContent":["import axios, { InternalAxiosRequestConfig } from 'axios';\nimport { Ticket } from '../types/system';\n\nconst API_BASE_URL = 'http://localhost:5001/api';\n\nexport interface LoginResponse {\n  token: string;\n  user: {\n    id: string;\n    username: string;\n    fullName: string;\n    role: string;\n    department: string;\n  };\n}\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use((config: InternalAxiosRequestConfig) => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const login = async (username: string, password: string): Promise<LoginResponse> => {\n  const response = await api.post<LoginResponse>('/auth/login', { username, password });\n  return response.data;\n};\n\nexport const createTicket = async (ticketData: Omit<Ticket, 'id' | 'status' | 'createdAt' | 'updatedAt'>): Promise<Ticket> => {\n  const formData = new FormData();\n  \n  // Add ticket data\n  formData.append('title', ticketData.title);\n  formData.append('description', ticketData.description);\n  formData.append('chemicalConfig', JSON.stringify(ticketData.chemicalConfig));\n  \n  // Add files if they exist\n  if (ticketData.attachments) {\n    ticketData.attachments.forEach(file => {\n      formData.append('files', file);\n    });\n  }\n\n  const response = await api.post<Ticket>('/tickets', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\nexport const getTickets = async (): Promise<Ticket[]> => {\n  const response = await api.get<Ticket[]>('/tickets');\n  return response.data;\n};\n\nexport const updateTicketStatus = async (ticketId: string, status: string): Promise<Ticket> => {\n  const response = await api.patch<Ticket>(`/tickets/${ticketId}/status`, { status });\n  return response.data;\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAsC,OAAO;AAGzD,MAAMC,YAAY,GAAG,2BAA2B;AAahD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAkC,IAAK;EACnE,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,IAAID,MAAM,CAACL,OAAO,EAAE;IAC3BK,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMK,KAAK,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,QAAgB,KAA6B;EACzF,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAgB,aAAa,EAAE;IAAEH,QAAQ;IAAEC;EAAS,CAAC,CAAC;EACrF,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAOC,UAAqE,IAAsB;EAC5H,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;EAE/B;EACAD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,UAAU,CAACI,KAAK,CAAC;EAC1CH,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEH,UAAU,CAACK,WAAW,CAAC;EACtDJ,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEG,IAAI,CAACC,SAAS,CAACP,UAAU,CAACQ,cAAc,CAAC,CAAC;;EAE5E;EACA,IAAIR,UAAU,CAACS,WAAW,EAAE;IAC1BT,UAAU,CAACS,WAAW,CAACC,OAAO,CAACC,IAAI,IAAI;MACrCV,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEQ,IAAI,CAAC;IAChC,CAAC,CAAC;EACJ;EAEA,MAAMf,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAS,UAAU,EAAEI,QAAQ,EAAE;IAC5DlB,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOa,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMc,UAAU,GAAG,MAAAA,CAAA,KAA+B;EACvD,MAAMhB,QAAQ,GAAG,MAAMhB,GAAG,CAACiC,GAAG,CAAW,UAAU,CAAC;EACpD,OAAOjB,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMgB,kBAAkB,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,MAAc,KAAsB;EAC7F,MAAMpB,QAAQ,GAAG,MAAMhB,GAAG,CAACqC,KAAK,CAAS,YAAYF,QAAQ,SAAS,EAAE;IAAEC;EAAO,CAAC,CAAC;EACnF,OAAOpB,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,eAAelB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}