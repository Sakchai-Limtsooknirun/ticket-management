{"ast":null,"code":"var _jsxFileName = \"/Users/a667227/Desktop/Work/ticket-management/src/components/TaskBoard.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport '../styles/TaskBoard.css';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Toast from './Toast';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TaskBoard = ({\n  tickets,\n  onStatusChange,\n  currentUser\n}) => {\n  _s();\n  const columns = ['DRAFT', 'PENDING', 'APPROVED', 'REJECTED'];\n  const [isDragging, setIsDragging] = useState(false);\n  const [toast, setToast] = useState({\n    message: '',\n    visible: false\n  });\n\n  // Check if the user can move the ticket from source to destination status\n  const canMoveTicket = (ticket, sourceStatus, destinationStatus) => {\n    const role = currentUser.role;\n\n    // ADMIN can move tickets freely between any status\n    if (role === 'ADMIN') return true;\n\n    // APPROVER can only approve or reject tickets from PENDING status\n    if (role === 'APPROVER') {\n      if (sourceStatus === 'PENDING' && (destinationStatus === 'APPROVED' || destinationStatus === 'REJECTED')) {\n        return true;\n      }\n      return false;\n    }\n\n    // REQUESTER can only move their own tickets from DRAFT to PENDING\n    if (role === 'REQUESTER') {\n      if (ticket.requesterId === currentUser._id && sourceStatus === 'DRAFT' && destinationStatus === 'PENDING') {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  };\n  const getRequesterName = ticket => {\n    var _ticket$requester;\n    return ((_ticket$requester = ticket.requester) === null || _ticket$requester === void 0 ? void 0 : _ticket$requester.fullName) || 'Unknown User';\n  };\n  const handleDragEnd = result => {\n    setIsDragging(false);\n    const {\n      draggableId,\n      source,\n      destination\n    } = result;\n\n    // Drop outside any droppable area or same position\n    if (!destination || source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    }\n    const ticketId = draggableId;\n    const sourceStatus = source.droppableId;\n    const destinationStatus = destination.droppableId;\n    const ticket = tickets.find(t => t._id === ticketId);\n    if (!ticket) return;\n\n    // Check if the user has permission to move the ticket\n    if (canMoveTicket(ticket, sourceStatus, destinationStatus)) {\n      onStatusChange(ticketId, destinationStatus);\n    } else {\n      // Show toast notification for permission error\n      setToast({\n        message: `You don't have permission to move this ticket to ${destinationStatus} status`,\n        visible: true\n      });\n    }\n  };\n  const handleDragStart = () => {\n    setIsDragging(true);\n  };\n\n  // Handle closing the toast\n  const handleCloseToast = () => {\n    setToast({\n      ...toast,\n      visible: false\n    });\n  };\n\n  // Get the droppable background color based on whether the drop is allowed\n  const getDroppableStyle = (isDraggingOver, ticket, status) => {\n    if (!isDraggingOver || !ticket) return {};\n    const sourceStatus = ticket.status;\n    const isAllowed = canMoveTicket(ticket, sourceStatus, status);\n    return {\n      backgroundColor: isDraggingOver ? isAllowed ? 'rgba(144, 238, 144, 0.2)' // Light green for allowed\n      : 'rgba(255, 99, 71, 0.2)' // Light red for not allowed\n      : 'inherit'\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [toast.visible && /*#__PURE__*/_jsxDEV(Toast, {\n      message: toast.message,\n      type: \"error\",\n      onClose: handleCloseToast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      onDragStart: handleDragStart,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-board\",\n        children: columns.map(status => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"column-title\",\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n            droppableId: status,\n            children: (provided, snapshot) => {\n              // Find the currently dragged ticket if any\n              let draggedTicket = null;\n              if (isDragging && snapshot.isDraggingOver && snapshot.draggingOverWith) {\n                const draggedId = snapshot.draggingOverWith;\n                const foundTicket = tickets.find(t => t._id === draggedId);\n                if (foundTicket) {\n                  draggedTicket = foundTicket;\n                }\n              }\n\n              // Determine if this is a valid drop target for the dragged ticket\n              let dropStatus = '';\n              if (draggedTicket && snapshot.isDraggingOver) {\n                const sourceStatus = draggedTicket.status;\n                const isAllowed = canMoveTicket(draggedTicket, sourceStatus, status);\n                dropStatus = isAllowed ? 'drop-allowed' : 'drop-denied';\n              }\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.droppableProps,\n                className: `task-list ${dropStatus}`,\n                style: getDroppableStyle(snapshot.isDraggingOver, draggedTicket, status),\n                children: [tickets.filter(ticket => ticket.status === status).map((ticket, index) => {\n                  // Determine if this ticket can be dragged\n                  const isDragDisabled = currentUser.role === 'REQUESTER' && (ticket.requesterId !== currentUser._id || ticket.status !== 'DRAFT') || currentUser.role === 'APPROVER' && ticket.status !== 'PENDING';\n                  return /*#__PURE__*/_jsxDEV(Draggable, {\n                    draggableId: ticket._id,\n                    index: index,\n                    isDragDisabled: isDragDisabled,\n                    children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                      ref: provided.innerRef,\n                      ...provided.draggableProps,\n                      ...provided.dragHandleProps,\n                      className: `task-card ${snapshot.isDragging ? 'is-dragging' : ''} ${isDragDisabled ? 'not-draggable' : ''}`,\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"task-priority\",\n                        \"data-priority\": ticket.department\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 176,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                        children: ticket.title\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 177,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: ticket.description\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 178,\n                        columnNumber: 35\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"task-meta\",\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"assignee\",\n                          children: getRequesterName(ticket)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 180,\n                          columnNumber: 37\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"due-date\",\n                          children: ticket.requestDate ? new Date(ticket.requestDate).toLocaleDateString() : 'No date'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 181,\n                          columnNumber: 37\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 179,\n                        columnNumber: 35\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 170,\n                      columnNumber: 33\n                    }, this)\n                  }, ticket._id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 163,\n                    columnNumber: 29\n                  }, this);\n                }), provided.placeholder]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 21\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-task-btn\",\n            children: \"+ Add Ticket\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this)]\n        }, status, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(TaskBoard, \"QChSPGfJG0W+1F7/i6uwjtWQPBE=\");\n_c = TaskBoard;\nexport default TaskBoard;\nvar _c;\n$RefreshReg$(_c, \"TaskBoard\");","map":{"version":3,"names":["useState","DragDropContext","Droppable","Draggable","Toast","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskBoard","tickets","onStatusChange","currentUser","_s","columns","isDragging","setIsDragging","toast","setToast","message","visible","canMoveTicket","ticket","sourceStatus","destinationStatus","role","requesterId","_id","getRequesterName","_ticket$requester","requester","fullName","handleDragEnd","result","draggableId","source","destination","droppableId","index","ticketId","find","t","handleDragStart","handleCloseToast","getDroppableStyle","isDraggingOver","status","isAllowed","backgroundColor","children","type","onClose","fileName","_jsxFileName","lineNumber","columnNumber","onDragEnd","onDragStart","className","map","provided","snapshot","draggedTicket","draggingOverWith","draggedId","foundTicket","dropStatus","ref","innerRef","droppableProps","style","filter","isDragDisabled","draggableProps","dragHandleProps","department","title","description","requestDate","Date","toLocaleDateString","placeholder","_c","$RefreshReg$"],"sources":["/Users/a667227/Desktop/Work/ticket-management/src/components/TaskBoard.tsx"],"sourcesContent":["import { FC, useState } from 'react';\nimport '../styles/TaskBoard.css';\nimport { Ticket, TicketStatus, User, UserRole } from '../types/system';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport Toast from './Toast';\n\ninterface TaskBoardProps {\n  tickets: Ticket[];\n  onStatusChange: (ticketId: string, newStatus: TicketStatus) => void;\n  currentUser: User;\n}\n\nconst TaskBoard: FC<TaskBoardProps> = ({ tickets, onStatusChange, currentUser }) => {\n  const columns: TicketStatus[] = ['DRAFT', 'PENDING', 'APPROVED', 'REJECTED'];\n  const [isDragging, setIsDragging] = useState(false);\n  const [toast, setToast] = useState<{ message: string; visible: boolean }>({\n    message: '',\n    visible: false\n  });\n\n  // Check if the user can move the ticket from source to destination status\n  const canMoveTicket = (\n    ticket: Ticket,\n    sourceStatus: TicketStatus,\n    destinationStatus: TicketStatus\n  ): boolean => {\n    const role = currentUser.role;\n    \n    // ADMIN can move tickets freely between any status\n    if (role === 'ADMIN') return true;\n    \n    // APPROVER can only approve or reject tickets from PENDING status\n    if (role === 'APPROVER') {\n      if (sourceStatus === 'PENDING' && (destinationStatus === 'APPROVED' || destinationStatus === 'REJECTED')) {\n        return true;\n      }\n      return false;\n    }\n    \n    // REQUESTER can only move their own tickets from DRAFT to PENDING\n    if (role === 'REQUESTER') {\n      if (ticket.requesterId === currentUser._id && sourceStatus === 'DRAFT' && destinationStatus === 'PENDING') {\n        return true;\n      }\n      return false;\n    }\n    \n    return false;\n  };\n\n  const getRequesterName = (ticket: Ticket): string => {\n    return ticket.requester?.fullName || 'Unknown User';\n  };\n\n  const handleDragEnd = (result: DropResult) => {\n    setIsDragging(false);\n    \n    const { draggableId, source, destination } = result;\n    \n    // Drop outside any droppable area or same position\n    if (!destination || \n        (source.droppableId === destination.droppableId && \n         source.index === destination.index)) {\n      return;\n    }\n    \n    const ticketId = draggableId;\n    const sourceStatus = source.droppableId as TicketStatus;\n    const destinationStatus = destination.droppableId as TicketStatus;\n    \n    const ticket = tickets.find(t => t._id === ticketId);\n    \n    if (!ticket) return;\n    \n    // Check if the user has permission to move the ticket\n    if (canMoveTicket(ticket, sourceStatus, destinationStatus)) {\n      onStatusChange(ticketId, destinationStatus);\n    } else {\n      // Show toast notification for permission error\n      setToast({\n        message: `You don't have permission to move this ticket to ${destinationStatus} status`,\n        visible: true\n      });\n    }\n  };\n  \n  const handleDragStart = () => {\n    setIsDragging(true);\n  };\n\n  // Handle closing the toast\n  const handleCloseToast = () => {\n    setToast({ ...toast, visible: false });\n  };\n\n  // Get the droppable background color based on whether the drop is allowed\n  const getDroppableStyle = (isDraggingOver: boolean, ticket: Ticket | null, status: TicketStatus) => {\n    if (!isDraggingOver || !ticket) return {};\n    \n    const sourceStatus = ticket.status;\n    const isAllowed = canMoveTicket(ticket, sourceStatus, status);\n    \n    return {\n      backgroundColor: isDraggingOver \n        ? isAllowed ? 'rgba(144, 238, 144, 0.2)' // Light green for allowed\n        : 'rgba(255, 99, 71, 0.2)' // Light red for not allowed\n        : 'inherit',\n    };\n  };\n\n  return (\n    <>\n      {toast.visible && (\n        <Toast \n          message={toast.message} \n          type=\"error\" \n          onClose={handleCloseToast} \n        />\n      )}\n      \n      <DragDropContext onDragEnd={handleDragEnd} onDragStart={handleDragStart}>\n        <div className=\"task-board\">\n          {columns.map((status) => (\n            <div key={status} className=\"task-column\">\n              <h3 className=\"column-title\">{status}</h3>\n              <Droppable droppableId={status}>\n                {(provided, snapshot) => {\n                  // Find the currently dragged ticket if any\n                  let draggedTicket: Ticket | null = null;\n                  if (isDragging && snapshot.isDraggingOver && snapshot.draggingOverWith) {\n                    const draggedId = snapshot.draggingOverWith;\n                    const foundTicket = tickets.find(t => t._id === draggedId);\n                    if (foundTicket) {\n                      draggedTicket = foundTicket;\n                    }\n                  }\n                  \n                  // Determine if this is a valid drop target for the dragged ticket\n                  let dropStatus = '';\n                  if (draggedTicket && snapshot.isDraggingOver) {\n                    const sourceStatus = draggedTicket.status;\n                    const isAllowed = canMoveTicket(draggedTicket, sourceStatus, status);\n                    dropStatus = isAllowed ? 'drop-allowed' : 'drop-denied';\n                  }\n                  \n                  return (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                      className={`task-list ${dropStatus}`}\n                      style={getDroppableStyle(snapshot.isDraggingOver, draggedTicket, status)}\n                    >\n                      {tickets\n                        .filter((ticket) => ticket.status === status)\n                        .map((ticket, index) => {\n                          // Determine if this ticket can be dragged\n                          const isDragDisabled = \n                            (currentUser.role === 'REQUESTER' && \n                            (ticket.requesterId !== currentUser._id || ticket.status !== 'DRAFT')) ||\n                            (currentUser.role === 'APPROVER' && ticket.status !== 'PENDING');\n                            \n                          return (\n                            <Draggable \n                              key={ticket._id} \n                              draggableId={ticket._id} \n                              index={index}\n                              isDragDisabled={isDragDisabled}\n                            >\n                              {(provided, snapshot) => (\n                                <div\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                  className={`task-card ${snapshot.isDragging ? 'is-dragging' : ''} ${isDragDisabled ? 'not-draggable' : ''}`}\n                                >\n                                  <div className=\"task-priority\" data-priority={ticket.department}></div>\n                                  <h4>{ticket.title}</h4>\n                                  <p>{ticket.description}</p>\n                                  <div className=\"task-meta\">\n                                    <span className=\"assignee\">{getRequesterName(ticket)}</span>\n                                    <span className=\"due-date\">\n                                      {ticket.requestDate ? new Date(ticket.requestDate).toLocaleDateString() : 'No date'}\n                                    </span>\n                                  </div>\n                                </div>\n                              )}\n                            </Draggable>\n                          );\n                        })}\n                      {provided.placeholder}\n                    </div>\n                  );\n                }}\n              </Droppable>\n              <button className=\"add-task-btn\">+ Add Ticket</button>\n            </div>\n          ))}\n        </div>\n      </DragDropContext>\n    </>\n  );\n};\n\nexport default TaskBoard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}