{"ast":null,"code":"var _jsxFileName = \"/Users/a667227/Desktop/Work/ticket-management/src/components/TaskBoard.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport '../styles/TaskBoard.css';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Toast from './Toast';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// StrictMode compatibility workaround for react-beautiful-dnd\nconst useDndStrictModeWorkaround = () => {\n  _s();\n  const [enabled, setEnabled] = useState(false);\n  useEffect(() => {\n    // We need to delay enabling the drag-n-drop until after the initial render\n    // to work around an issue with StrictMode in React 18\n    const timeout = setTimeout(() => {\n      setEnabled(true);\n    }, 0);\n    return () => clearTimeout(timeout);\n  }, []);\n  return enabled;\n};\n_s(useDndStrictModeWorkaround, \"KO045EdmUKRrcVNzr+fxbg9aW04=\");\nconst TaskBoard = ({\n  tickets,\n  onStatusChange,\n  currentUser\n}) => {\n  _s2();\n  const columns = ['DRAFT', 'PENDING', 'APPROVED', 'REJECTED'];\n  const [isDragging, setIsDragging] = useState(false);\n  const [toast, setToast] = useState({\n    message: '',\n    visible: false\n  });\n\n  // Use the StrictMode workaround\n  const isDndEnabled = useDndStrictModeWorkaround();\n\n  // Clean up drag state on unmount\n  useEffect(() => {\n    return () => {\n      setIsDragging(false);\n    };\n  }, []);\n\n  // Check if the user can move the ticket from source to destination status\n  const canMoveTicket = (ticket, sourceStatus, destinationStatus) => {\n    const role = currentUser.role;\n\n    // ADMIN can move tickets freely between any status\n    if (role === 'ADMIN') return true;\n\n    // APPROVER can only approve or reject tickets from PENDING status\n    if (role === 'APPROVER') {\n      if (sourceStatus === 'PENDING' && (destinationStatus === 'APPROVED' || destinationStatus === 'REJECTED')) {\n        return true;\n      }\n      return false;\n    }\n\n    // REQUESTER can only move their own tickets from DRAFT to PENDING\n    if (role === 'REQUESTER') {\n      if (ticket.requesterId === currentUser._id && sourceStatus === 'DRAFT' && destinationStatus === 'PENDING') {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  };\n  const getRequesterName = ticket => {\n    var _ticket$requester;\n    return ((_ticket$requester = ticket.requester) === null || _ticket$requester === void 0 ? void 0 : _ticket$requester.fullName) || 'Unknown User';\n  };\n  const handleDragEnd = result => {\n    setIsDragging(false);\n    const {\n      draggableId,\n      source,\n      destination\n    } = result;\n\n    // Drop outside any droppable area or same position\n    if (!destination || source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    }\n\n    // Extract the ticket ID from the draggableId (remove 'ticket-' prefix)\n    const ticketId = draggableId.replace('ticket-', '');\n\n    // Extract the status from the droppableId (remove 'column-' prefix)\n    const sourceStatus = source.droppableId.replace('column-', '');\n    const destinationStatus = destination.droppableId.replace('column-', '');\n    const ticket = tickets.find(t => t._id === ticketId);\n    if (!ticket) return;\n\n    // Check if the user has permission to move the ticket\n    if (canMoveTicket(ticket, sourceStatus, destinationStatus)) {\n      onStatusChange(ticketId, destinationStatus);\n    } else {\n      // Show toast notification for permission error\n      setToast({\n        message: `You don't have permission to move this ticket to ${destinationStatus} status`,\n        visible: true\n      });\n    }\n  };\n  const handleDragStart = () => {\n    setIsDragging(true);\n  };\n\n  // Handle closing the toast\n  const handleCloseToast = () => {\n    setToast({\n      ...toast,\n      visible: false\n    });\n  };\n\n  // Create a simplified board without drag-and-drop\n  const renderSimpleBoard = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-board\",\n      children: columns.map(status => {\n        // Create a consistent droppable ID\n        const droppableId = `column-${status}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"column-title\",\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-list\",\n            children: tickets.filter(ticket => ticket.status === status).map(ticket => {\n              // Create a consistent draggable ID\n              const draggableId = `ticket-${ticket._id}`;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-card\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"task-priority\",\n                  \"data-priority\": ticket.department\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: ticket.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: ticket.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"task-meta\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"assignee\",\n                    children: getRequesterName(ticket)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 150,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"due-date\",\n                    children: ticket.requestDate ? new Date(ticket.requestDate).toLocaleDateString() : 'No date'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 151,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 25\n                }, this)]\n              }, draggableId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-task-btn\",\n            children: \"+ Add Ticket\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this)]\n        }, droppableId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  };\n\n  // If DnD is not enabled yet, render a simplified board\n  if (!isDndEnabled) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [toast.visible && /*#__PURE__*/_jsxDEV(Toast, {\n        message: toast.message,\n        type: \"error\",\n        onClose: handleCloseToast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), renderSimpleBoard()]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [toast.visible && /*#__PURE__*/_jsxDEV(Toast, {\n      message: toast.message,\n      type: \"error\",\n      onClose: handleCloseToast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      onDragStart: handleDragStart,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-board\",\n        children: columns.map(columnStatus => {\n          // Create a consistent droppable ID\n          const droppableId = `column-${columnStatus}`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-column\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"column-title\",\n              children: columnStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n              droppableId: droppableId,\n              children: (provided, snapshot) => {\n                // Filter tickets for this column\n                const columnTickets = tickets.filter(ticket => ticket.status === columnStatus);\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  ref: provided.innerRef,\n                  ...provided.droppableProps,\n                  className: `task-list ${snapshot.isDraggingOver ? 'drop-allowed' : ''}`,\n                  children: [columnTickets.map((ticket, index) => {\n                    // Determine if this ticket can be dragged\n                    const isDragDisabled = currentUser.role === 'REQUESTER' && (ticket.requesterId !== currentUser._id || ticket.status !== 'DRAFT') || currentUser.role === 'APPROVER' && ticket.status !== 'PENDING';\n\n                    // Create a consistent draggable ID\n                    const draggableId = `ticket-${ticket._id}`;\n                    return /*#__PURE__*/_jsxDEV(Draggable, {\n                      draggableId: draggableId,\n                      index: index,\n                      isDragDisabled: isDragDisabled,\n                      children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                        ref: provided.innerRef,\n                        ...provided.draggableProps,\n                        ...provided.dragHandleProps,\n                        className: `task-card ${snapshot.isDragging ? 'is-dragging' : ''} ${isDragDisabled ? 'not-draggable' : ''}`,\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"task-priority\",\n                          \"data-priority\": ticket.department\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 237,\n                          columnNumber: 35\n                        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                          children: ticket.title\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 238,\n                          columnNumber: 35\n                        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                          children: ticket.description\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 239,\n                          columnNumber: 35\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"task-meta\",\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            className: \"assignee\",\n                            children: getRequesterName(ticket)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 241,\n                            columnNumber: 37\n                          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                            className: \"due-date\",\n                            children: ticket.requestDate ? new Date(ticket.requestDate).toLocaleDateString() : 'No date'\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 242,\n                            columnNumber: 37\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 240,\n                          columnNumber: 35\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 231,\n                        columnNumber: 33\n                      }, this)\n                    }, draggableId, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 224,\n                      columnNumber: 29\n                    }, this);\n                  }), provided.placeholder]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 23\n                }, this);\n              }\n            }, droppableId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"add-task-btn\",\n              children: \"+ Add Ticket\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 17\n            }, this)]\n          }, columnStatus, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s2(TaskBoard, \"Ql8QqJILIY6xuQwFuc+Pgd5KrZQ=\", false, function () {\n  return [useDndStrictModeWorkaround];\n});\n_c = TaskBoard;\nexport default TaskBoard;\nvar _c;\n$RefreshReg$(_c, \"TaskBoard\");","map":{"version":3,"names":["useState","useEffect","DragDropContext","Droppable","Draggable","Toast","jsxDEV","_jsxDEV","Fragment","_Fragment","useDndStrictModeWorkaround","_s","enabled","setEnabled","timeout","setTimeout","clearTimeout","TaskBoard","tickets","onStatusChange","currentUser","_s2","columns","isDragging","setIsDragging","toast","setToast","message","visible","isDndEnabled","canMoveTicket","ticket","sourceStatus","destinationStatus","role","requesterId","_id","getRequesterName","_ticket$requester","requester","fullName","handleDragEnd","result","draggableId","source","destination","droppableId","index","ticketId","replace","find","t","handleDragStart","handleCloseToast","renderSimpleBoard","className","children","map","status","fileName","_jsxFileName","lineNumber","columnNumber","filter","department","title","description","requestDate","Date","toLocaleDateString","type","onClose","onDragEnd","onDragStart","columnStatus","provided","snapshot","columnTickets","ref","innerRef","droppableProps","isDraggingOver","isDragDisabled","draggableProps","dragHandleProps","placeholder","_c","$RefreshReg$"],"sources":["/Users/a667227/Desktop/Work/ticket-management/src/components/TaskBoard.tsx"],"sourcesContent":["import { FC, useState, useEffect } from 'react';\nimport '../styles/TaskBoard.css';\nimport { Ticket, TicketStatus, User } from '../types/system';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport Toast from './Toast';\n\ninterface TaskBoardProps {\n  tickets: Ticket[];\n  onStatusChange: (ticketId: string, newStatus: TicketStatus) => void;\n  currentUser: User;\n}\n\n// StrictMode compatibility workaround for react-beautiful-dnd\nconst useDndStrictModeWorkaround = () => {\n  const [enabled, setEnabled] = useState(false);\n  \n  useEffect(() => {\n    // We need to delay enabling the drag-n-drop until after the initial render\n    // to work around an issue with StrictMode in React 18\n    const timeout = setTimeout(() => {\n      setEnabled(true);\n    }, 0);\n    \n    return () => clearTimeout(timeout);\n  }, []);\n  \n  return enabled;\n};\n\nconst TaskBoard: FC<TaskBoardProps> = ({ tickets, onStatusChange, currentUser }) => {\n  const columns: TicketStatus[] = ['DRAFT', 'PENDING', 'APPROVED', 'REJECTED'];\n  const [isDragging, setIsDragging] = useState(false);\n  const [toast, setToast] = useState<{ message: string; visible: boolean }>({\n    message: '',\n    visible: false\n  });\n  \n  // Use the StrictMode workaround\n  const isDndEnabled = useDndStrictModeWorkaround();\n\n  // Clean up drag state on unmount\n  useEffect(() => {\n    return () => {\n      setIsDragging(false);\n    };\n  }, []);\n\n  // Check if the user can move the ticket from source to destination status\n  const canMoveTicket = (\n    ticket: Ticket,\n    sourceStatus: TicketStatus,\n    destinationStatus: TicketStatus\n  ): boolean => {\n    const role = currentUser.role;\n    \n    // ADMIN can move tickets freely between any status\n    if (role === 'ADMIN') return true;\n    \n    // APPROVER can only approve or reject tickets from PENDING status\n    if (role === 'APPROVER') {\n      if (sourceStatus === 'PENDING' && (destinationStatus === 'APPROVED' || destinationStatus === 'REJECTED')) {\n        return true;\n      }\n      return false;\n    }\n    \n    // REQUESTER can only move their own tickets from DRAFT to PENDING\n    if (role === 'REQUESTER') {\n      if (ticket.requesterId === currentUser._id && sourceStatus === 'DRAFT' && destinationStatus === 'PENDING') {\n        return true;\n      }\n      return false;\n    }\n    \n    return false;\n  };\n\n  const getRequesterName = (ticket: Ticket): string => {\n    return ticket.requester?.fullName || 'Unknown User';\n  };\n\n  const handleDragEnd = (result: DropResult) => {\n    setIsDragging(false);\n    \n    const { draggableId, source, destination } = result;\n    \n    // Drop outside any droppable area or same position\n    if (!destination || \n        (source.droppableId === destination.droppableId && \n         source.index === destination.index)) {\n      return;\n    }\n    \n    // Extract the ticket ID from the draggableId (remove 'ticket-' prefix)\n    const ticketId = draggableId.replace('ticket-', '');\n    \n    // Extract the status from the droppableId (remove 'column-' prefix)\n    const sourceStatus = source.droppableId.replace('column-', '') as TicketStatus;\n    const destinationStatus = destination.droppableId.replace('column-', '') as TicketStatus;\n    \n    const ticket = tickets.find(t => t._id === ticketId);\n    \n    if (!ticket) return;\n    \n    // Check if the user has permission to move the ticket\n    if (canMoveTicket(ticket, sourceStatus, destinationStatus)) {\n      onStatusChange(ticketId, destinationStatus);\n    } else {\n      // Show toast notification for permission error\n      setToast({\n        message: `You don't have permission to move this ticket to ${destinationStatus} status`,\n        visible: true\n      });\n    }\n  };\n  \n  const handleDragStart = () => {\n    setIsDragging(true);\n  };\n\n  // Handle closing the toast\n  const handleCloseToast = () => {\n    setToast({ ...toast, visible: false });\n  };\n\n  // Create a simplified board without drag-and-drop\n  const renderSimpleBoard = () => {\n    return (\n      <div className=\"task-board\">\n        {columns.map((status) => {\n          // Create a consistent droppable ID\n          const droppableId = `column-${status}`;\n          \n          return (\n            <div key={droppableId} className=\"task-column\">\n              <h3 className=\"column-title\">{status}</h3>\n              <div className=\"task-list\">\n                {tickets\n                  .filter((ticket) => ticket.status === status)\n                  .map((ticket) => {\n                    // Create a consistent draggable ID\n                    const draggableId = `ticket-${ticket._id}`;\n                    \n                    return (\n                      <div key={draggableId} className=\"task-card\">\n                        <div className=\"task-priority\" data-priority={ticket.department}></div>\n                        <h4>{ticket.title}</h4>\n                        <p>{ticket.description}</p>\n                        <div className=\"task-meta\">\n                          <span className=\"assignee\">{getRequesterName(ticket)}</span>\n                          <span className=\"due-date\">\n                            {ticket.requestDate ? new Date(ticket.requestDate).toLocaleDateString() : 'No date'}\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n              </div>\n              <button className=\"add-task-btn\">+ Add Ticket</button>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  // If DnD is not enabled yet, render a simplified board\n  if (!isDndEnabled) {\n    return (\n      <>\n        {toast.visible && (\n          <Toast \n            message={toast.message} \n            type=\"error\" \n            onClose={handleCloseToast} \n          />\n        )}\n        {renderSimpleBoard()}\n      </>\n    );\n  }\n\n  return (\n    <>\n      {toast.visible && (\n        <Toast \n          message={toast.message} \n          type=\"error\" \n          onClose={handleCloseToast} \n        />\n      )}\n      \n      <DragDropContext onDragEnd={handleDragEnd} onDragStart={handleDragStart}>\n        <div className=\"task-board\">\n          {columns.map((columnStatus) => {\n            // Create a consistent droppable ID\n            const droppableId = `column-${columnStatus}`;\n            \n            return (\n              <div key={columnStatus} className=\"task-column\">\n                <h3 className=\"column-title\">{columnStatus}</h3>\n                <Droppable droppableId={droppableId} key={droppableId}>\n                  {(provided, snapshot) => {\n                    // Filter tickets for this column\n                    const columnTickets = tickets.filter(ticket => ticket.status === columnStatus);\n                    \n                    return (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}\n                        className={`task-list ${snapshot.isDraggingOver ? 'drop-allowed' : ''}`}\n                      >\n                        {columnTickets.map((ticket, index) => {\n                          // Determine if this ticket can be dragged\n                          const isDragDisabled = \n                            (currentUser.role === 'REQUESTER' && \n                            (ticket.requesterId !== currentUser._id || ticket.status !== 'DRAFT')) ||\n                            (currentUser.role === 'APPROVER' && ticket.status !== 'PENDING');\n                            \n                          // Create a consistent draggable ID\n                          const draggableId = `ticket-${ticket._id}`;\n                          \n                          return (\n                            <Draggable \n                              key={draggableId} \n                              draggableId={draggableId}\n                              index={index}\n                              isDragDisabled={isDragDisabled}\n                            >\n                              {(provided, snapshot) => (\n                                <div\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                  className={`task-card ${snapshot.isDragging ? 'is-dragging' : ''} ${isDragDisabled ? 'not-draggable' : ''}`}\n                                >\n                                  <div className=\"task-priority\" data-priority={ticket.department}></div>\n                                  <h4>{ticket.title}</h4>\n                                  <p>{ticket.description}</p>\n                                  <div className=\"task-meta\">\n                                    <span className=\"assignee\">{getRequesterName(ticket)}</span>\n                                    <span className=\"due-date\">\n                                      {ticket.requestDate ? new Date(ticket.requestDate).toLocaleDateString() : 'No date'}\n                                    </span>\n                                  </div>\n                                </div>\n                              )}\n                            </Draggable>\n                          );\n                        })}\n                        {provided.placeholder}\n                      </div>\n                    );\n                  }}\n                </Droppable>\n                <button className=\"add-task-btn\">+ Add Ticket</button>\n              </div>\n            );\n          })}\n        </div>\n      </DragDropContext>\n    </>\n  );\n};\n\nexport default TaskBoard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}