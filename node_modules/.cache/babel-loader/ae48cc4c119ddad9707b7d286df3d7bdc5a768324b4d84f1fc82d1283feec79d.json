{"ast":null,"code":"import'../styles/TaskBoard.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TaskBoard=_ref=>{let{tickets,onStatusChange,currentUser}=_ref;const columns=['DRAFT','PENDING','APPROVED','REJECTED'];const canChangeStatus=ticket=>{if(currentUser.role==='ADMIN')return true;if(currentUser.role==='APPROVER'&&ticket.status==='PENDING')return true;if(currentUser.role==='REQUESTER'&&ticket.requesterId===currentUser.id&&ticket.status==='DRAFT')return true;return false;};const getNextStatus=currentStatus=>{switch(currentStatus){case'DRAFT':return'PENDING';case'PENDING':return currentUser.role==='APPROVER'?'APPROVED':null;default:return null;}};const getRequesterName=ticket=>{var _ticket$requester;return((_ticket$requester=ticket.requester)===null||_ticket$requester===void 0?void 0:_ticket$requester.fullName)||'Unknown User';};return/*#__PURE__*/_jsx(\"div\",{className:\"task-board\",children:columns.map(status=>/*#__PURE__*/_jsxs(\"div\",{className:\"task-column\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"column-title\",children:status}),/*#__PURE__*/_jsx(\"div\",{className:\"task-list\",children:tickets.filter(ticket=>ticket.status===status).map(ticket=>/*#__PURE__*/_jsxs(\"div\",{className:\"task-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"task-priority\",\"data-priority\":ticket.department}),/*#__PURE__*/_jsx(\"h4\",{children:ticket.title}),/*#__PURE__*/_jsx(\"p\",{children:ticket.description}),/*#__PURE__*/_jsxs(\"div\",{className:\"task-meta\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"assignee\",children:getRequesterName(ticket)}),/*#__PURE__*/_jsx(\"span\",{className:\"due-date\",children:ticket.requestDate?new Date(ticket.requestDate).toLocaleDateString():'No date'})]}),canChangeStatus(ticket)&&getNextStatus(ticket.status)&&/*#__PURE__*/_jsxs(\"button\",{className:\"status-change-btn\",onClick:()=>{const nextStatus=getNextStatus(ticket.status);if(nextStatus){onStatusChange(ticket.id,nextStatus);}},children:[\"Move to \",getNextStatus(ticket.status)]})]},ticket.id))}),/*#__PURE__*/_jsx(\"button\",{className:\"add-task-btn\",children:\"+ Add Ticket\"})]},status))});};export default TaskBoard;","map":{"version":3,"names":["jsx","_jsx","jsxs","_jsxs","TaskBoard","_ref","tickets","onStatusChange","currentUser","columns","canChangeStatus","ticket","role","status","requesterId","id","getNextStatus","currentStatus","getRequesterName","_ticket$requester","requester","fullName","className","children","map","filter","department","title","description","requestDate","Date","toLocaleDateString","onClick","nextStatus"],"sources":["/Users/a667227/Desktop/Work/ticket-management/src/components/TaskBoard.tsx"],"sourcesContent":["import { FC } from 'react';\nimport '../styles/TaskBoard.css';\nimport { Ticket, TicketStatus, User } from '../types/system';\n\ninterface TaskBoardProps {\n  tickets: Ticket[];\n  onStatusChange: (ticketId: string, newStatus: TicketStatus) => void;\n  currentUser: User;\n}\n\nconst TaskBoard: FC<TaskBoardProps> = ({ tickets, onStatusChange, currentUser }) => {\n  const columns: TicketStatus[] = ['DRAFT', 'PENDING', 'APPROVED', 'REJECTED'];\n\n  const canChangeStatus = (ticket: Ticket): boolean => {\n    if (currentUser.role === 'ADMIN') return true;\n    if (currentUser.role === 'APPROVER' && ticket.status === 'PENDING') return true;\n    if (currentUser.role === 'REQUESTER' && ticket.requesterId === currentUser.id && ticket.status === 'DRAFT') return true;\n    return false;\n  };\n\n  const getNextStatus = (currentStatus: TicketStatus): TicketStatus | null => {\n    switch (currentStatus) {\n      case 'DRAFT': return 'PENDING';\n      case 'PENDING': return currentUser.role === 'APPROVER' ? 'APPROVED' : null;\n      default: return null;\n    }\n  };\n\n  const getRequesterName = (ticket: Ticket): string => {\n    return ticket.requester?.fullName || 'Unknown User';\n  };\n\n  return (\n    <div className=\"task-board\">\n      {columns.map((status) => (\n        <div key={status} className=\"task-column\">\n          <h3 className=\"column-title\">{status}</h3>\n          <div className=\"task-list\">\n            {tickets\n              .filter((ticket) => ticket.status === status)\n              .map((ticket) => (\n                <div key={ticket.id} className=\"task-card\">\n                  <div className=\"task-priority\" data-priority={ticket.department}></div>\n                  <h4>{ticket.title}</h4>\n                  <p>{ticket.description}</p>\n                  <div className=\"task-meta\">\n                    <span className=\"assignee\">{getRequesterName(ticket)}</span>\n                    <span className=\"due-date\">\n                      {ticket.requestDate ? new Date(ticket.requestDate).toLocaleDateString() : 'No date'}\n                    </span>\n                  </div>\n                  {canChangeStatus(ticket) && getNextStatus(ticket.status) && (\n                    <button \n                      className=\"status-change-btn\"\n                      onClick={() => {\n                        const nextStatus = getNextStatus(ticket.status);\n                        if (nextStatus) {\n                          onStatusChange(ticket.id, nextStatus);\n                        }\n                      }}\n                    >\n                      Move to {getNextStatus(ticket.status)}\n                    </button>\n                  )}\n                </div>\n              ))}\n          </div>\n          <button className=\"add-task-btn\">+ Add Ticket</button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TaskBoard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}