{"ast":null,"code":"var _jsxFileName = \"/Users/s89539/Desktop/ticket-management/src/components/ProtectedRoute.tsx\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  currentUser,\n  requiredRole\n}) => {\n  // Check if required role is a string or array of strings\n  if (Array.isArray(requiredRole)) {\n    // Allow access if user role is included in the required roles array\n    if (!requiredRole.map(role => role.toUpperCase()).includes(currentUser.role.toUpperCase())) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 14\n      }, this);\n    }\n  } else {\n    // Check against single role\n    if (currentUser.role.toUpperCase() !== requiredRole.toUpperCase()) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 14\n      }, this);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","Fragment","_Fragment","ProtectedRoute","children","currentUser","requiredRole","Array","isArray","map","role","toUpperCase","includes","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/s89539/Desktop/ticket-management/src/components/ProtectedRoute.tsx"],"sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { User } from '../types/system';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  currentUser: User;\n  requiredRole: string | string[];\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ \n  children, \n  currentUser, \n  requiredRole \n}) => {\n  // Check if required role is a string or array of strings\n  if (Array.isArray(requiredRole)) {\n    // Allow access if user role is included in the required roles array\n    if (!requiredRole.map(role => role.toUpperCase()).includes(currentUser.role.toUpperCase())) {\n      return <Navigate to=\"/\" replace />;\n    }\n  } else {\n    // Check against single role\n    if (currentUser.role.toUpperCase() !== requiredRole.toUpperCase()) {\n      return <Navigate to=\"/\" replace />;\n    }\n  }\n\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAS5C,MAAMC,cAA6C,GAAGA,CAAC;EACrDC,QAAQ;EACRC,WAAW;EACXC;AACF,CAAC,KAAK;EACJ;EACA,IAAIC,KAAK,CAACC,OAAO,CAACF,YAAY,CAAC,EAAE;IAC/B;IACA,IAAI,CAACA,YAAY,CAACG,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACP,WAAW,CAACK,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,EAAE;MAC1F,oBAAOX,OAAA,CAACF,QAAQ;QAACe,EAAE,EAAC,GAAG;QAACC,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACpC;EACF,CAAC,MAAM;IACL;IACA,IAAIb,WAAW,CAACK,IAAI,CAACC,WAAW,CAAC,CAAC,KAAKL,YAAY,CAACK,WAAW,CAAC,CAAC,EAAE;MACjE,oBAAOX,OAAA,CAACF,QAAQ;QAACe,EAAE,EAAC,GAAG;QAACC,OAAO;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACpC;EACF;EAEA,oBAAOlB,OAAA,CAAAE,SAAA;IAAAE,QAAA,EAAGA;EAAQ,gBAAG,CAAC;AACxB,CAAC;AAACe,EAAA,GAnBIhB,cAA6C;AAqBnD,eAAeA,cAAc;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}