{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5001/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const login = async (username, password) => {\n  const response = await api.post('/auth/login', {\n    username,\n    password\n  });\n  return response.data;\n};\nexport const createTicket = async ticketData => {\n  const formData = new FormData();\n\n  // Add ticket data\n  formData.append('title', ticketData.title);\n  formData.append('description', ticketData.description);\n  formData.append('requesterId', ticketData.requesterId);\n  formData.append('department', ticketData.department);\n  formData.append('chemicalConfig', JSON.stringify(ticketData.chemicalConfig));\n\n  // Add files if they exist\n  if (ticketData.attachments && ticketData.attachments instanceof FileList) {\n    Array.from(ticketData.attachments).forEach(file => {\n      formData.append('files', file);\n    });\n  }\n  const response = await api.post('/tickets', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\n\n// New function to get tickets without date filtering for debugging\nexport const getAllTicketsRaw = async () => {\n  console.log('Fetching all tickets raw for debugging');\n  try {\n    const response = await api.get('/tickets');\n    console.log('Raw API response:', response);\n    return response.data;\n  } catch (error) {\n    console.error('Error in raw ticket fetch:', error);\n    return {\n      error\n    };\n  }\n};\nexport const getTickets = async (status, page = 1, limit = 10, dateRange) => {\n  try {\n    // Build query parameters\n    const params = {\n      page: page.toString(),\n      limit: limit.toString()\n    };\n    if (status) {\n      params.status = status;\n    }\n\n    // Add date filter parameters if provided\n    if (dateRange) {\n      // Format dates as ISO strings and extract just the date part for consistency\n      params.startDate = dateRange.startDate.toISOString().split('T')[0];\n\n      // For end date, ensure we're capturing the full day by setting time to end of day\n      const endDate = new Date(dateRange.endDate);\n      endDate.setHours(23, 59, 59, 999);\n      params.endDate = endDate.toISOString();\n      console.log('API call with date range:', {\n        startDate: params.startDate,\n        endDate: params.endDate\n      });\n    } else {\n      console.log('API call with no date range provided');\n    }\n    const queryString = new URLSearchParams(params).toString();\n    console.log(`Fetching tickets with params: ${queryString}`);\n    const response = await api.get(`/tickets?${queryString}`);\n    console.log('API response:', response.data);\n    if (response.data.tickets) {\n      return response.data;\n    } else {\n      // Handle legacy response format if needed\n      console.warn('Legacy response format detected, missing tickets wrapper');\n      return {\n        tickets: response.data,\n        pagination: {\n          page,\n          limit,\n          total: response.data.length,\n          totalPages: Math.ceil(response.data.length / limit)\n        },\n        dateRange\n      };\n    }\n  } catch (error) {\n    var _error$response;\n    console.error('Error fetching tickets:', error);\n    console.error('Error details:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\nexport const updateTicketStatus = async (ticketId, status) => {\n  const response = await api.put(`/tickets/${ticketId}`, {\n    status\n  });\n  return response.data;\n};\nexport const updateTicket = async (ticketId, updateData) => {\n  const formData = new FormData();\n\n  // Add basic ticket data if provided\n  if (updateData.title) formData.append('title', updateData.title);\n  if (updateData.description) formData.append('description', updateData.description);\n  if (updateData.status) formData.append('status', updateData.status);\n  if (updateData.department) formData.append('department', updateData.department);\n  if (updateData.chemicalConfig) formData.append('chemicalConfig', JSON.stringify(updateData.chemicalConfig));\n\n  // Add new files if they exist\n  if (updateData.attachments && updateData.attachments instanceof FileList) {\n    Array.from(updateData.attachments).forEach(file => {\n      formData.append('files', file);\n    });\n  }\n  const response = await api.put(`/tickets/${ticketId}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","login","username","password","response","post","data","createTicket","ticketData","formData","FormData","append","title","description","requesterId","department","JSON","stringify","chemicalConfig","attachments","FileList","Array","from","forEach","file","getAllTicketsRaw","console","log","get","error","getTickets","status","page","limit","dateRange","params","toString","startDate","toISOString","split","endDate","Date","setHours","queryString","URLSearchParams","tickets","warn","pagination","total","length","totalPages","Math","ceil","_error$response","message","updateTicketStatus","ticketId","put","updateTicket","updateData"],"sources":["/Users/a667227/Desktop/Work/ticket-management/src/services/api.ts"],"sourcesContent":["import axios, { InternalAxiosRequestConfig } from 'axios';\nimport { Ticket, TicketStatus } from '../types/ticket';\n\nconst API_BASE_URL = 'http://localhost:5001/api';\n\nexport interface LoginResponse {\n  token: string;\n  user: {\n    id: string;\n    username: string;\n    email: string;\n    fullName: string;\n    role: string;\n    department: string;\n  };\n}\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use((config: InternalAxiosRequestConfig) => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const login = async (username: string, password: string): Promise<LoginResponse> => {\n  const response = await api.post<LoginResponse>('/auth/login', { username, password });\n  return response.data;\n};\n\nexport const createTicket = async (ticketData: Omit<Ticket, 'id' | 'status' | 'createdAt' | 'updatedAt'>): Promise<Ticket> => {\n  const formData = new FormData();\n  \n  // Add ticket data\n  formData.append('title', ticketData.title);\n  formData.append('description', ticketData.description);\n  formData.append('requesterId', ticketData.requesterId);\n  formData.append('department', ticketData.department);\n  formData.append('chemicalConfig', JSON.stringify(ticketData.chemicalConfig));\n  \n  // Add files if they exist\n  if (ticketData.attachments && ticketData.attachments instanceof FileList) {\n    Array.from(ticketData.attachments).forEach(file => {\n      formData.append('files', file);\n    });\n  }\n\n  const response = await api.post<Ticket>('/tickets', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\n// New function to get tickets without date filtering for debugging\nexport const getAllTicketsRaw = async (): Promise<any> => {\n  console.log('Fetching all tickets raw for debugging');\n  try {\n    const response = await api.get('/tickets');\n    console.log('Raw API response:', response);\n    return response.data;\n  } catch (error) {\n    console.error('Error in raw ticket fetch:', error);\n    return { error };\n  }\n};\n\nexport const getTickets = async (\n  status?: TicketStatus,\n  page = 1,\n  limit = 10,\n  dateRange?: { startDate: Date; endDate: Date }\n) => {\n  try {\n    // Build query parameters\n    const params: Record<string, string> = {\n      page: page.toString(),\n      limit: limit.toString(),\n    };\n\n    if (status) {\n      params.status = status;\n    }\n\n    // Add date filter parameters if provided\n    if (dateRange) {\n      // Format dates as ISO strings and extract just the date part for consistency\n      params.startDate = dateRange.startDate.toISOString().split('T')[0];\n      \n      // For end date, ensure we're capturing the full day by setting time to end of day\n      const endDate = new Date(dateRange.endDate);\n      endDate.setHours(23, 59, 59, 999);\n      params.endDate = endDate.toISOString();\n      \n      console.log('API call with date range:', { \n        startDate: params.startDate, \n        endDate: params.endDate \n      });\n    } else {\n      console.log('API call with no date range provided');\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    \n    console.log(`Fetching tickets with params: ${queryString}`);\n    const response = await api.get(`/tickets?${queryString}`);\n    \n    console.log('API response:', response.data);\n    \n    if (response.data.tickets) {\n      return response.data;\n    } else {\n      // Handle legacy response format if needed\n      console.warn('Legacy response format detected, missing tickets wrapper');\n      return {\n        tickets: response.data,\n        pagination: {\n          page,\n          limit,\n          total: response.data.length,\n          totalPages: Math.ceil(response.data.length / limit),\n        },\n        dateRange\n      };\n    }\n  } catch (error: any) {\n    console.error('Error fetching tickets:', error);\n    console.error('Error details:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const updateTicketStatus = async (ticketId: string, status: string): Promise<Ticket> => {\n  const response = await api.put<Ticket>(`/tickets/${ticketId}`, { status });\n  return response.data;\n};\n\nexport const updateTicket = async (ticketId: string, updateData: Partial<Ticket>): Promise<Ticket> => {\n  const formData = new FormData();\n  \n  // Add basic ticket data if provided\n  if (updateData.title) formData.append('title', updateData.title);\n  if (updateData.description) formData.append('description', updateData.description);\n  if (updateData.status) formData.append('status', updateData.status);\n  if (updateData.department) formData.append('department', updateData.department);\n  if (updateData.chemicalConfig) formData.append('chemicalConfig', JSON.stringify(updateData.chemicalConfig));\n  \n  // Add new files if they exist\n  if (updateData.attachments && updateData.attachments instanceof FileList) {\n    Array.from(updateData.attachments).forEach(file => {\n      formData.append('files', file);\n    });\n  }\n\n  const response = await api.put<Ticket>(`/tickets/${ticketId}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}