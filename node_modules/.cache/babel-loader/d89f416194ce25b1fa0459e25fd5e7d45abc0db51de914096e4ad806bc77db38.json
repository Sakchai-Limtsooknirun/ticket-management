{"ast":null,"code":"import axios from'axios';// Update API base URL - the backend routes are already using this pattern\nconst API_BASE_URL='http://localhost:5001';// Add a simple ping function to check API connectivity\nexport const checkApiConnection=async()=>{var _localStorage$getItem;console.log('Checking API connectivity');const connectionInfo={apiBaseUrl:API_BASE_URL,checks:[],systemInfo:{userAgent:navigator.userAgent,platform:navigator.platform,language:navigator.language,connectionType:navigator.connection?navigator.connection.effectiveType:'unknown'},auth:{hasToken:!!localStorage.getItem('token'),tokenLength:((_localStorage$getItem=localStorage.getItem('token'))===null||_localStorage$getItem===void 0?void 0:_localStorage$getItem.length)||0},startTime:new Date().toISOString()};try{// Check 1: Simple connectivity check - OPTIONS request\nconnectionInfo.checks.push({name:'Basic OPTIONS Request',endpoint:'/',method:'OPTIONS',startTime:new Date().toISOString(),status:'pending'});try{const optionsResponse=await axios.options(`${API_BASE_URL}/`);connectionInfo.checks[0].status='success';connectionInfo.checks[0].statusCode=optionsResponse.status;connectionInfo.checks[0].headers=optionsResponse.headers;}catch(error){connectionInfo.checks[0].status='error';connectionInfo.checks[0].error={message:error.message,code:error.code};}connectionInfo.checks[0].endTime=new Date().toISOString();// Check 2: Auth status endpoint - note: Using the auth login endpoint for checking\nconnectionInfo.checks.push({name:'Auth Status Endpoint',endpoint:'/',method:'GET',startTime:new Date().toISOString(),status:'pending'});try{// Use root endpoint as status check since API is working\nconst statusResponse=await axios.get(`${API_BASE_URL}/`);connectionInfo.checks[1].status='success';connectionInfo.checks[1].statusCode=statusResponse.status;connectionInfo.checks[1].data=statusResponse.data;connectionInfo.checks[1].message='Server is online';connectionInfo.serverStatus='online';}catch(error){connectionInfo.checks[1].status='error';connectionInfo.checks[1].error={message:error.message,code:error.code,response:error.response?{status:error.response.status,data:error.response.data}:null};connectionInfo.serverStatus='unknown';}connectionInfo.checks[1].endTime=new Date().toISOString();// Check 3: Try the auth login endpoint\nconnectionInfo.checks.push({name:'Auth Login Endpoint',endpoint:'/api/auth/login',method:'GET',startTime:new Date().toISOString(),status:'pending'});try{// Just check if the endpoint exists without sending credentials\nconst authEndpointResponse=await axios.get(`${API_BASE_URL}/api/auth/login`,{validateStatus:status=>status<500// Allow 4xx responses\n});// Even 401 or 405 means the endpoint exists\nconnectionInfo.checks[2].status='success';connectionInfo.checks[2].statusCode=authEndpointResponse.status;connectionInfo.checks[2].message='Auth endpoint exists (returned '+authEndpointResponse.status+')';}catch(error){connectionInfo.checks[2].status='error';connectionInfo.checks[2].error={message:error.message,code:error.code,response:error.response?{status:error.response.status,data:error.response.data}:null};}connectionInfo.checks[2].endTime=new Date().toISOString();// Check 4: Try the tickets endpoint\nconnectionInfo.checks.push({name:'Tickets Endpoint',endpoint:'/api/tickets',method:'GET',startTime:new Date().toISOString(),status:'pending'});try{const ticketsResponse=await axios.get(`${API_BASE_URL}/api/tickets`,{validateStatus:status=>status<500,// Allow 4xx responses\nheaders:{// Add token if available\n...(localStorage.getItem('token')?{Authorization:`Bearer ${localStorage.getItem('token')}`}:{})}});// Even 401 is OK - it means the endpoint exists\nconst endpointExists=ticketsResponse.status!==404;connectionInfo.checks[3].status=endpointExists?'success':'error';connectionInfo.checks[3].statusCode=ticketsResponse.status;connectionInfo.checks[3].message=`Tickets endpoint ${endpointExists?'exists':'does not exist'} (${ticketsResponse.status})`;if(ticketsResponse.status===200){connectionInfo.checks[3].dataType=typeof ticketsResponse.data;connectionInfo.checks[3].dataStructure=Array.isArray(ticketsResponse.data)?'array':typeof ticketsResponse.data;}}catch(error){connectionInfo.checks[3].status='error';connectionInfo.checks[3].error={message:error.message,code:error.code,response:error.response?{status:error.response.status,data:error.response.data}:null};}connectionInfo.checks[3].endTime=new Date().toISOString();// Check 5: Try the root API endpoint\nconnectionInfo.checks.push({name:'Root API Check',endpoint:'/',method:'GET',startTime:new Date().toISOString(),status:'pending'});try{const rootResponse=await axios.get(`${API_BASE_URL}`,{validateStatus:status=>status<500// Allow 4xx responses\n});connectionInfo.checks[4].status='success';connectionInfo.checks[4].statusCode=rootResponse.status;connectionInfo.checks[4].message=`Root API endpoint response: ${rootResponse.status}`;}catch(error){connectionInfo.checks[4].status='error';connectionInfo.checks[4].error={message:error.message,code:error.code};}connectionInfo.checks[4].endTime=new Date().toISOString();// Check if server appears to be running at all\nconnectionInfo.summary={serverRunning:connectionInfo.checks.some(c=>c.status==='success'),authEndpointConfigured:false,ticketsEndpointConfigured:false,possibleIssues:[]};// Check if auth appears to be properly configured\nconst authEndpointExists=connectionInfo.checks[2].status==='success';// Add summary\nconnectionInfo.summary.authEndpointConfigured=authEndpointExists;connectionInfo.summary.ticketsEndpointConfigured=connectionInfo.checks.some(c=>c.name==='Tickets Endpoint'&&c.status==='success');// Add possible issues\nif(!connectionInfo.summary.serverRunning){connectionInfo.summary.possibleIssues.push('Server does not appear to be running');}if(authEndpointExists&&connectionInfo.checks[2].statusCode===404){connectionInfo.summary.possibleIssues.push('Auth endpoint not found - check backend routes configuration');}connectionInfo.endTime=new Date().toISOString();// Determine overall status\nif(!connectionInfo.summary.serverRunning){connectionInfo.overallStatus='server_unreachable';}else if(connectionInfo.checks.every(c=>c.statusCode===404)){connectionInfo.overallStatus='wrong_api_base_url';}else if(!connectionInfo.summary.authEndpointConfigured){connectionInfo.overallStatus='auth_endpoint_missing';}else{connectionInfo.overallStatus='ok';}return connectionInfo;}catch(error){connectionInfo.endTime=new Date().toISOString();connectionInfo.overallStatus='check_failed';connectionInfo.error={message:error.message,stack:error.stack};return connectionInfo;}};const api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'},withCredentials:true});// Add token to requests if it exists\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token&&config.headers){config.headers.Authorization=`Bearer ${token}`;}return config;});export const login=async(username,password)=>{const response=await api.post('/api/auth/login',{username,password});return response.data;};export const createTicket=async ticketData=>{const formData=new FormData();// Add ticket data\nformData.append('title',ticketData.title);formData.append('description',ticketData.description);formData.append('requesterId',ticketData.requesterId);formData.append('department',ticketData.department);formData.append('chemicalConfig',JSON.stringify(ticketData.chemicalConfig));// Add files if they exist\nif(ticketData.attachments&&ticketData.attachments instanceof FileList){Array.from(ticketData.attachments).forEach(file=>{formData.append('files',file);});}const response=await api.post('/api/tickets',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;};// New function to get tickets without date filtering for debugging\nexport const getAllTicketsRaw=async()=>{console.log('Fetching all tickets raw for debugging');const debugInfo={requestInfo:{},responseInfo:{},error:null,attempts:[]};try{// Get auth token info\nconst token=localStorage.getItem('token');debugInfo.requestInfo.auth={hasToken:!!token,tokenLength:token?token.length:0,tokenStart:token?token.substring(0,10)+'...':'none'};// Try multiple variations of API calls to diagnose the issue\n// Attempt 1: Basic call without params\nconsole.log('DEBUG attempt 1: Basic call without params');debugInfo.attempts.push({name:'Basic Call',url:'/api/tickets',params:{},startTime:new Date().toISOString()});let response=await api.get('/api/tickets');debugInfo.attempts[0].response={status:response.status,statusText:response.statusText,headers:response.headers,dataType:typeof response.data,isArray:Array.isArray(response.data),length:Array.isArray(response.data)?response.data.length:null,data:response.data};debugInfo.attempts[0].endTime=new Date().toISOString();// Attempt 2: With pagination params only\nconsole.log('DEBUG attempt 2: With pagination params only');const params={page:'1',limit:'100'};debugInfo.attempts.push({name:'Pagination Only',url:'/api/tickets',params,startTime:new Date().toISOString()});response=await api.get('/api/tickets',{params});debugInfo.attempts[1].response={status:response.status,statusText:response.statusText,headers:response.headers,dataType:typeof response.data,isArray:Array.isArray(response.data),length:Array.isArray(response.data)?response.data.length:null,data:response.data};debugInfo.attempts[1].endTime=new Date().toISOString();// Attempt 3: With modified date range (all time)\nconsole.log('DEBUG attempt 3: With all-time date range');const dateParams={page:'1',limit:'100',startDate:'2020-01-01',endDate:new Date().toISOString()};debugInfo.attempts.push({name:'All-Time Date Range',url:'/api/tickets',params:dateParams,startTime:new Date().toISOString()});response=await api.get('/api/tickets',{params:dateParams});debugInfo.attempts[2].response={status:response.status,statusText:response.statusText,headers:response.headers,dataType:typeof response.data,isArray:Array.isArray(response.data),length:Array.isArray(response.data)?response.data.length:null,data:response.data};debugInfo.attempts[2].endTime=new Date().toISOString();// Return the combined debug info\nreturn{success:true,debugInfo,mainResponse:response.data};}catch(error){console.error('Error in raw ticket fetch:',error);debugInfo.error={message:error.message,stack:error.stack,response:error.response?{status:error.response.status,statusText:error.response.statusText,data:error.response.data}:null};return{success:false,error:error.message,debugInfo};}};export const getTickets=async function(status){let page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;let limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10;let dateRange=arguments.length>3?arguments[3]:undefined;try{// Build query parameters\nconst params={page:page.toString(),limit:limit.toString()};if(status){params.status=status;}// Add date filter parameters if provided\nif(dateRange){// Format dates as ISO strings and extract just the date part for consistency\nparams.startDate=dateRange.startDate.toISOString().split('T')[0];// For end date, ensure we're capturing the full day by setting time to end of day\nconst endDate=new Date(dateRange.endDate);endDate.setHours(23,59,59,999);params.endDate=endDate.toISOString();console.log('API call with date range:',{startDate:params.startDate,endDate:params.endDate});}else{console.log('API call with no date range provided');}const queryString=new URLSearchParams(params).toString();console.log(`Fetching tickets with params: ${queryString}`);const response=await api.get(`/api/tickets?${queryString}`);// Add more detailed logging\nconsole.log('API response type:',typeof response.data);console.log('API response keys:',Object.keys(response.data||{}));// Check if response has the expected structure\nif(response.data&&response.data.tickets&&Array.isArray(response.data.tickets)){console.log(`Found ${response.data.tickets.length} tickets in response`);return response.data;}// Handle case where response is directly an array of tickets\nif(Array.isArray(response.data)){console.log(`Response is an array with ${response.data.length} tickets`);return{tickets:response.data,pagination:{page,limit,total:response.data.length,totalPages:Math.ceil(response.data.length/limit)}};}// Handle empty or unexpected response\nconsole.warn('Unexpected response format:',response.data);return{tickets:[],pagination:{page,limit,total:0,totalPages:0}};}catch(error){var _error$response;console.error('Error fetching tickets:',error);console.error('Error details:',((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);// Return empty data structure instead of throwing\nreturn{tickets:[],pagination:{page,limit,total:0,totalPages:0},error:error.message};}};export const updateTicketStatus=async(ticketId,status)=>{const response=await api.put(`/api/tickets/${ticketId}`,{status});return response.data;};export const updateTicket=async(ticketId,updateData)=>{const formData=new FormData();// Add basic ticket data if provided\nif(updateData.title)formData.append('title',updateData.title);if(updateData.description)formData.append('description',updateData.description);if(updateData.status)formData.append('status',updateData.status);if(updateData.department)formData.append('department',updateData.department);if(updateData.chemicalConfig)formData.append('chemicalConfig',JSON.stringify(updateData.chemicalConfig));// Add new files if they exist\nif(updateData.attachments&&Array.isArray(updateData.attachments)){updateData.attachments.forEach(file=>{if(file instanceof File){formData.append('files',file);}});}const response=await api.put(`/api/tickets/${ticketId}`,formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","checkApiConnection","_localStorage$getItem","console","log","connectionInfo","apiBaseUrl","checks","systemInfo","userAgent","navigator","platform","language","connectionType","connection","effectiveType","auth","hasToken","localStorage","getItem","tokenLength","length","startTime","Date","toISOString","push","name","endpoint","method","status","optionsResponse","options","statusCode","headers","error","message","code","endTime","statusResponse","get","data","serverStatus","response","authEndpointResponse","validateStatus","ticketsResponse","Authorization","endpointExists","dataType","dataStructure","Array","isArray","rootResponse","summary","serverRunning","some","c","authEndpointConfigured","ticketsEndpointConfigured","possibleIssues","authEndpointExists","overallStatus","every","stack","api","create","baseURL","withCredentials","interceptors","request","use","config","token","login","username","password","post","createTicket","ticketData","formData","FormData","append","title","description","requesterId","department","JSON","stringify","chemicalConfig","attachments","FileList","from","forEach","file","getAllTicketsRaw","debugInfo","requestInfo","responseInfo","attempts","tokenStart","substring","url","params","statusText","page","limit","dateParams","startDate","endDate","success","mainResponse","getTickets","arguments","undefined","dateRange","toString","split","setHours","queryString","URLSearchParams","Object","keys","tickets","pagination","total","totalPages","Math","ceil","warn","_error$response","updateTicketStatus","ticketId","put","updateTicket","updateData","File"],"sources":["/Users/s89539/Desktop/ticket-management/src/services/api.ts"],"sourcesContent":["import axios, { InternalAxiosRequestConfig } from 'axios';\nimport { Ticket, TicketStatus } from '../types/system';\n\n// Update API base URL - the backend routes are already using this pattern\nconst API_BASE_URL = 'http://localhost:5001';\n\n// Add a simple ping function to check API connectivity\nexport const checkApiConnection = async (): Promise<any> => {\n  console.log('Checking API connectivity');\n  const connectionInfo: any = {\n    apiBaseUrl: API_BASE_URL,\n    checks: [],\n    systemInfo: {\n      userAgent: navigator.userAgent,\n      platform: navigator.platform,\n      language: navigator.language,\n      connectionType: (navigator as any).connection ? \n        (navigator as any).connection.effectiveType : 'unknown'\n    },\n    auth: {\n      hasToken: !!localStorage.getItem('token'),\n      tokenLength: localStorage.getItem('token')?.length || 0\n    },\n    startTime: new Date().toISOString()\n  };\n  \n  try {\n    // Check 1: Simple connectivity check - OPTIONS request\n    connectionInfo.checks.push({\n      name: 'Basic OPTIONS Request',\n      endpoint: '/',\n      method: 'OPTIONS',\n      startTime: new Date().toISOString(),\n      status: 'pending'\n    });\n    \n    try {\n      const optionsResponse = await axios.options(`${API_BASE_URL}/`);\n      connectionInfo.checks[0].status = 'success';\n      connectionInfo.checks[0].statusCode = optionsResponse.status;\n      connectionInfo.checks[0].headers = optionsResponse.headers;\n    } catch (error: any) {\n      connectionInfo.checks[0].status = 'error';\n      connectionInfo.checks[0].error = {\n        message: error.message,\n        code: error.code\n      };\n    }\n    connectionInfo.checks[0].endTime = new Date().toISOString();\n    \n    // Check 2: Auth status endpoint - note: Using the auth login endpoint for checking\n    connectionInfo.checks.push({\n      name: 'Auth Status Endpoint',\n      endpoint: '/',\n      method: 'GET',\n      startTime: new Date().toISOString(),\n      status: 'pending'\n    });\n    \n    try {\n      // Use root endpoint as status check since API is working\n      const statusResponse = await axios.get(`${API_BASE_URL}/`);\n      connectionInfo.checks[1].status = 'success';\n      connectionInfo.checks[1].statusCode = statusResponse.status;\n      connectionInfo.checks[1].data = statusResponse.data;\n      connectionInfo.checks[1].message = 'Server is online';\n      connectionInfo.serverStatus = 'online';\n    } catch (error: any) {\n      connectionInfo.checks[1].status = 'error';\n      connectionInfo.checks[1].error = {\n        message: error.message,\n        code: error.code,\n        response: error.response ? {\n          status: error.response.status,\n          data: error.response.data\n        } : null\n      };\n      connectionInfo.serverStatus = 'unknown';\n    }\n    connectionInfo.checks[1].endTime = new Date().toISOString();\n    \n    // Check 3: Try the auth login endpoint\n    connectionInfo.checks.push({\n      name: 'Auth Login Endpoint',\n      endpoint: '/api/auth/login',\n      method: 'GET',\n      startTime: new Date().toISOString(),\n      status: 'pending'\n    });\n    \n    try {\n      // Just check if the endpoint exists without sending credentials\n      const authEndpointResponse = await axios.get(`${API_BASE_URL}/api/auth/login`, {\n        validateStatus: (status) => status < 500 // Allow 4xx responses\n      });\n      \n      // Even 401 or 405 means the endpoint exists\n      connectionInfo.checks[2].status = 'success';\n      connectionInfo.checks[2].statusCode = authEndpointResponse.status;\n      connectionInfo.checks[2].message = 'Auth endpoint exists (returned ' + authEndpointResponse.status + ')';\n    } catch (error: any) {\n      connectionInfo.checks[2].status = 'error';\n      connectionInfo.checks[2].error = {\n        message: error.message,\n        code: error.code,\n        response: error.response ? {\n          status: error.response.status,\n          data: error.response.data\n        } : null\n      };\n    }\n    connectionInfo.checks[2].endTime = new Date().toISOString();\n    \n    // Check 4: Try the tickets endpoint\n    connectionInfo.checks.push({\n      name: 'Tickets Endpoint',\n      endpoint: '/api/tickets',\n      method: 'GET',\n      startTime: new Date().toISOString(),\n      status: 'pending'\n    });\n    \n    try {\n      const ticketsResponse = await axios.get(`${API_BASE_URL}/api/tickets`, {\n        validateStatus: (status) => status < 500, // Allow 4xx responses\n        headers: { \n          // Add token if available\n          ...(localStorage.getItem('token') \n            ? { Authorization: `Bearer ${localStorage.getItem('token')}` } \n            : {})\n        }\n      });\n      \n      // Even 401 is OK - it means the endpoint exists\n      const endpointExists = ticketsResponse.status !== 404;\n      connectionInfo.checks[3].status = endpointExists ? 'success' : 'error';\n      connectionInfo.checks[3].statusCode = ticketsResponse.status;\n      connectionInfo.checks[3].message = `Tickets endpoint ${endpointExists ? 'exists' : 'does not exist'} (${ticketsResponse.status})`;\n      \n      if (ticketsResponse.status === 200) {\n        connectionInfo.checks[3].dataType = typeof ticketsResponse.data;\n        connectionInfo.checks[3].dataStructure = Array.isArray(ticketsResponse.data) ? \n          'array' : typeof ticketsResponse.data;\n      }\n    } catch (error: any) {\n      connectionInfo.checks[3].status = 'error';\n      connectionInfo.checks[3].error = {\n        message: error.message,\n        code: error.code,\n        response: error.response ? {\n          status: error.response.status,\n          data: error.response.data\n        } : null\n      };\n    }\n    connectionInfo.checks[3].endTime = new Date().toISOString();\n    \n    // Check 5: Try the root API endpoint\n    connectionInfo.checks.push({\n      name: 'Root API Check',\n      endpoint: '/',\n      method: 'GET',\n      startTime: new Date().toISOString(),\n      status: 'pending'\n    });\n    \n    try {\n      const rootResponse = await axios.get(`${API_BASE_URL}`, {\n        validateStatus: (status) => status < 500 // Allow 4xx responses\n      });\n      \n      connectionInfo.checks[4].status = 'success';\n      connectionInfo.checks[4].statusCode = rootResponse.status;\n      connectionInfo.checks[4].message = `Root API endpoint response: ${rootResponse.status}`;\n    } catch (error: any) {\n      connectionInfo.checks[4].status = 'error';\n      connectionInfo.checks[4].error = {\n        message: error.message,\n        code: error.code\n      };\n    }\n    connectionInfo.checks[4].endTime = new Date().toISOString();\n    \n    // Check if server appears to be running at all\n    connectionInfo.summary = {\n      serverRunning: connectionInfo.checks.some((c: any) => c.status === 'success'),\n      authEndpointConfigured: false,\n      ticketsEndpointConfigured: false,\n      possibleIssues: []\n    };\n    \n    // Check if auth appears to be properly configured\n    const authEndpointExists = connectionInfo.checks[2].status === 'success';\n    \n    // Add summary\n    connectionInfo.summary.authEndpointConfigured = authEndpointExists;\n    connectionInfo.summary.ticketsEndpointConfigured = \n      connectionInfo.checks.some((c: any) => c.name === 'Tickets Endpoint' && c.status === 'success');\n    \n    // Add possible issues\n    if (!connectionInfo.summary.serverRunning) {\n      connectionInfo.summary.possibleIssues.push('Server does not appear to be running');\n    }\n    \n    if (authEndpointExists && connectionInfo.checks[2].statusCode === 404) {\n      connectionInfo.summary.possibleIssues.push('Auth endpoint not found - check backend routes configuration');\n    }\n    \n    connectionInfo.endTime = new Date().toISOString();\n    \n    // Determine overall status\n    if (!connectionInfo.summary.serverRunning) {\n      connectionInfo.overallStatus = 'server_unreachable';\n    } else if (connectionInfo.checks.every((c: any) => c.statusCode === 404)) {\n      connectionInfo.overallStatus = 'wrong_api_base_url';\n    } else if (!connectionInfo.summary.authEndpointConfigured) {\n      connectionInfo.overallStatus = 'auth_endpoint_missing';\n    } else {\n      connectionInfo.overallStatus = 'ok';\n    }\n    \n    return connectionInfo;\n  } catch (error: any) {\n    connectionInfo.endTime = new Date().toISOString();\n    connectionInfo.overallStatus = 'check_failed';\n    connectionInfo.error = {\n      message: error.message,\n      stack: error.stack\n    };\n    return connectionInfo;\n  }\n};\n\nexport interface LoginResponse {\n  token: string;\n  user: {\n    id: string;\n    username: string;\n    email: string;\n    fullName: string;\n    role: string;\n    department: string;\n  };\n}\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use((config: InternalAxiosRequestConfig) => {\n  const token = localStorage.getItem('token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const login = async (username: string, password: string): Promise<LoginResponse> => {\n  const response = await api.post<LoginResponse>('/api/auth/login', { username, password });\n  return response.data;\n};\n\nexport const createTicket = async (ticketData: Omit<Ticket, 'id' | 'status' | 'createdAt' | 'updatedAt'>): Promise<Ticket> => {\n  const formData = new FormData();\n  \n  // Add ticket data\n  formData.append('title', ticketData.title);\n  formData.append('description', ticketData.description);\n  formData.append('requesterId', ticketData.requesterId);\n  formData.append('department', ticketData.department);\n  formData.append('chemicalConfig', JSON.stringify(ticketData.chemicalConfig));\n  \n  // Add files if they exist\n  if (ticketData.attachments && ticketData.attachments instanceof FileList) {\n    Array.from(ticketData.attachments).forEach(file => {\n      formData.append('files', file);\n    });\n  }\n\n  const response = await api.post<Ticket>('/api/tickets', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\n// New function to get tickets without date filtering for debugging\nexport const getAllTicketsRaw = async (): Promise<any> => {\n  console.log('Fetching all tickets raw for debugging');\n  const debugInfo: any = {\n    requestInfo: {},\n    responseInfo: {},\n    error: null,\n    attempts: []\n  };\n  \n  try {\n    // Get auth token info\n    const token = localStorage.getItem('token');\n    debugInfo.requestInfo.auth = {\n      hasToken: !!token,\n      tokenLength: token ? token.length : 0,\n      tokenStart: token ? token.substring(0, 10) + '...' : 'none'\n    };\n    \n    // Try multiple variations of API calls to diagnose the issue\n    \n    // Attempt 1: Basic call without params\n    console.log('DEBUG attempt 1: Basic call without params');\n    debugInfo.attempts.push({ \n      name: 'Basic Call', \n      url: '/api/tickets',\n      params: {},\n      startTime: new Date().toISOString()\n    });\n    \n    let response = await api.get('/api/tickets');\n    \n    debugInfo.attempts[0].response = {\n      status: response.status,\n      statusText: response.statusText,\n      headers: response.headers,\n      dataType: typeof response.data,\n      isArray: Array.isArray(response.data),\n      length: Array.isArray(response.data) ? response.data.length : null,\n      data: response.data\n    };\n    debugInfo.attempts[0].endTime = new Date().toISOString();\n    \n    // Attempt 2: With pagination params only\n    console.log('DEBUG attempt 2: With pagination params only');\n    const params = {\n      page: '1',\n      limit: '100'\n    };\n    \n    debugInfo.attempts.push({ \n      name: 'Pagination Only', \n      url: '/api/tickets',\n      params,\n      startTime: new Date().toISOString()\n    });\n    \n    response = await api.get('/api/tickets', { params });\n    \n    debugInfo.attempts[1].response = {\n      status: response.status,\n      statusText: response.statusText,\n      headers: response.headers,\n      dataType: typeof response.data,\n      isArray: Array.isArray(response.data),\n      length: Array.isArray(response.data) ? response.data.length : null,\n      data: response.data\n    };\n    debugInfo.attempts[1].endTime = new Date().toISOString();\n    \n    // Attempt 3: With modified date range (all time)\n    console.log('DEBUG attempt 3: With all-time date range');\n    const dateParams = {\n      page: '1',\n      limit: '100',\n      startDate: '2020-01-01',\n      endDate: new Date().toISOString()\n    };\n    \n    debugInfo.attempts.push({ \n      name: 'All-Time Date Range', \n      url: '/api/tickets',\n      params: dateParams,\n      startTime: new Date().toISOString()\n    });\n    \n    response = await api.get('/api/tickets', { params: dateParams });\n    \n    debugInfo.attempts[2].response = {\n      status: response.status,\n      statusText: response.statusText,\n      headers: response.headers,\n      dataType: typeof response.data,\n      isArray: Array.isArray(response.data),\n      length: Array.isArray(response.data) ? response.data.length : null,\n      data: response.data\n    };\n    debugInfo.attempts[2].endTime = new Date().toISOString();\n    \n    // Return the combined debug info\n    return {\n      success: true,\n      debugInfo,\n      mainResponse: response.data\n    };\n  } catch (error: any) {\n    console.error('Error in raw ticket fetch:', error);\n    debugInfo.error = {\n      message: error.message,\n      stack: error.stack,\n      response: error.response ? {\n        status: error.response.status,\n        statusText: error.response.statusText,\n        data: error.response.data\n      } : null\n    };\n    return { \n      success: false,\n      error: error.message,\n      debugInfo\n    };\n  }\n};\n\nexport const getTickets = async (\n  status?: TicketStatus,\n  page = 1,\n  limit = 10,\n  dateRange?: { startDate: Date; endDate: Date }\n) => {\n  try {\n    // Build query parameters\n    const params: Record<string, string> = {\n      page: page.toString(),\n      limit: limit.toString(),\n    };\n\n    if (status) {\n      params.status = status;\n    }\n\n    // Add date filter parameters if provided\n    if (dateRange) {\n      // Format dates as ISO strings and extract just the date part for consistency\n      params.startDate = dateRange.startDate.toISOString().split('T')[0];\n      \n      // For end date, ensure we're capturing the full day by setting time to end of day\n      const endDate = new Date(dateRange.endDate);\n      endDate.setHours(23, 59, 59, 999);\n      params.endDate = endDate.toISOString();\n      \n      console.log('API call with date range:', { \n        startDate: params.startDate, \n        endDate: params.endDate \n      });\n    } else {\n      console.log('API call with no date range provided');\n    }\n\n    const queryString = new URLSearchParams(params).toString();\n    \n    console.log(`Fetching tickets with params: ${queryString}`);\n    const response = await api.get(`/api/tickets?${queryString}`);\n    \n    // Add more detailed logging\n    console.log('API response type:', typeof response.data);\n    console.log('API response keys:', Object.keys(response.data || {}));\n    \n    // Check if response has the expected structure\n    if (response.data && response.data.tickets && Array.isArray(response.data.tickets)) {\n      console.log(`Found ${response.data.tickets.length} tickets in response`);\n      return response.data;\n    } \n    \n    // Handle case where response is directly an array of tickets\n    if (Array.isArray(response.data)) {\n      console.log(`Response is an array with ${response.data.length} tickets`);\n      return {\n        tickets: response.data,\n        pagination: {\n          page,\n          limit,\n          total: response.data.length,\n          totalPages: Math.ceil(response.data.length / limit),\n        }\n      };\n    }\n    \n    // Handle empty or unexpected response\n    console.warn('Unexpected response format:', response.data);\n    return {\n      tickets: [],\n      pagination: {\n        page,\n        limit,\n        total: 0,\n        totalPages: 0\n      }\n    };\n  } catch (error: any) {\n    console.error('Error fetching tickets:', error);\n    console.error('Error details:', error.response?.data || error.message);\n    \n    // Return empty data structure instead of throwing\n    return {\n      tickets: [],\n      pagination: {\n        page,\n        limit,\n        total: 0,\n        totalPages: 0\n      },\n      error: error.message\n    };\n  }\n};\n\nexport const updateTicketStatus = async (ticketId: string, status: string): Promise<Ticket> => {\n  const response = await api.put<Ticket>(`/api/tickets/${ticketId}`, { status });\n  return response.data;\n};\n\nexport const updateTicket = async (ticketId: string, updateData: Partial<Ticket>): Promise<Ticket> => {\n  const formData = new FormData();\n  \n  // Add basic ticket data if provided\n  if (updateData.title) formData.append('title', updateData.title);\n  if (updateData.description) formData.append('description', updateData.description);\n  if (updateData.status) formData.append('status', updateData.status);\n  if (updateData.department) formData.append('department', updateData.department);\n  if (updateData.chemicalConfig) formData.append('chemicalConfig', JSON.stringify(updateData.chemicalConfig));\n  \n  // Add new files if they exist\n  if (updateData.attachments && Array.isArray(updateData.attachments)) {\n    updateData.attachments.forEach(file => {\n      if (file instanceof File) {\n        formData.append('files', file);\n      }\n    });\n  }\n\n  const response = await api.put<Ticket>(`/api/tickets/${ticketId}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n  return response.data;\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}